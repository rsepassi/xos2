pub const c = @cImport(@cInclude("miniaudio.h"));

pub fn check(rc: c_int) !void {
    if (rc == c.MA_SUCCESS) return;
    return switch (rc) {
        c.MA_SUCCESS => error.MA_SUCCESS,
        c.MA_ERROR => error.MA_ERROR,
        c.MA_INVALID_ARGS => error.MA_INVALID_ARGS,
        c.MA_INVALID_OPERATION => error.MA_INVALID_OPERATION,
        c.MA_OUT_OF_MEMORY => error.MA_OUT_OF_MEMORY,
        c.MA_OUT_OF_RANGE => error.MA_OUT_OF_RANGE,
        c.MA_ACCESS_DENIED => error.MA_ACCESS_DENIED,
        c.MA_DOES_NOT_EXIST => error.MA_DOES_NOT_EXIST,
        c.MA_ALREADY_EXISTS => error.MA_ALREADY_EXISTS,
        c.MA_TOO_MANY_OPEN_FILES => error.MA_TOO_MANY_OPEN_FILES,
        c.MA_INVALID_FILE => error.MA_INVALID_FILE,
        c.MA_TOO_BIG => error.MA_TOO_BIG,
        c.MA_PATH_TOO_LONG => error.MA_PATH_TOO_LONG,
        c.MA_NAME_TOO_LONG => error.MA_NAME_TOO_LONG,
        c.MA_NOT_DIRECTORY => error.MA_NOT_DIRECTORY,
        c.MA_IS_DIRECTORY => error.MA_IS_DIRECTORY,
        c.MA_DIRECTORY_NOT_EMPTY => error.MA_DIRECTORY_NOT_EMPTY,
        c.MA_AT_END => error.MA_AT_END,
        c.MA_NO_SPACE => error.MA_NO_SPACE,
        c.MA_BUSY => error.MA_BUSY,
        c.MA_IO_ERROR => error.MA_IO_ERROR,
        c.MA_INTERRUPT => error.MA_INTERRUPT,
        c.MA_UNAVAILABLE => error.MA_UNAVAILABLE,
        c.MA_ALREADY_IN_USE => error.MA_ALREADY_IN_USE,
        c.MA_BAD_ADDRESS => error.MA_BAD_ADDRESS,
        c.MA_BAD_SEEK => error.MA_BAD_SEEK,
        c.MA_BAD_PIPE => error.MA_BAD_PIPE,
        c.MA_DEADLOCK => error.MA_DEADLOCK,
        c.MA_TOO_MANY_LINKS => error.MA_TOO_MANY_LINKS,
        c.MA_NOT_IMPLEMENTED => error.MA_NOT_IMPLEMENTED,
        c.MA_NO_MESSAGE => error.MA_NO_MESSAGE,
        c.MA_BAD_MESSAGE => error.MA_BAD_MESSAGE,
        c.MA_NO_DATA_AVAILABLE => error.MA_NO_DATA_AVAILABLE,
        c.MA_INVALID_DATA => error.MA_INVALID_DATA,
        c.MA_TIMEOUT => error.MA_TIMEOUT,
        c.MA_NO_NETWORK => error.MA_NO_NETWORK,
        c.MA_NOT_UNIQUE => error.MA_NOT_UNIQUE,
        c.MA_NOT_SOCKET => error.MA_NOT_SOCKET,
        c.MA_NO_ADDRESS => error.MA_NO_ADDRESS,
        c.MA_BAD_PROTOCOL => error.MA_BAD_PROTOCOL,
        c.MA_PROTOCOL_UNAVAILABLE => error.MA_PROTOCOL_UNAVAILABLE,
        c.MA_PROTOCOL_NOT_SUPPORTED => error.MA_PROTOCOL_NOT_SUPPORTED,
        c.MA_PROTOCOL_FAMILY_NOT_SUPPORTED => error.MA_PROTOCOL_FAMILY_NOT_SUPPORTED,
        c.MA_ADDRESS_FAMILY_NOT_SUPPORTED => error.MA_ADDRESS_FAMILY_NOT_SUPPORTED,
        c.MA_SOCKET_NOT_SUPPORTED => error.MA_SOCKET_NOT_SUPPORTED,
        c.MA_CONNECTION_RESET => error.MA_CONNECTION_RESET,
        c.MA_ALREADY_CONNECTED => error.MA_ALREADY_CONNECTED,
        c.MA_NOT_CONNECTED => error.MA_NOT_CONNECTED,
        c.MA_CONNECTION_REFUSED => error.MA_CONNECTION_REFUSED,
        c.MA_NO_HOST => error.MA_NO_HOST,
        c.MA_IN_PROGRESS => error.MA_IN_PROGRESS,
        c.MA_CANCELLED => error.MA_CANCELLED,
        c.MA_MEMORY_ALREADY_MAPPED => error.MA_MEMORY_ALREADY_MAPPED,
        c.MA_CRC_MISMATCH => error.MA_CRC_MISMATCH,
        c.MA_FORMAT_NOT_SUPPORTED => error.MA_FORMAT_NOT_SUPPORTED,
        c.MA_DEVICE_TYPE_NOT_SUPPORTED => error.MA_DEVICE_TYPE_NOT_SUPPORTED,
        c.MA_SHARE_MODE_NOT_SUPPORTED => error.MA_SHARE_MODE_NOT_SUPPORTED,
        c.MA_NO_BACKEND => error.MA_NO_BACKEND,
        c.MA_NO_DEVICE => error.MA_NO_DEVICE,
        c.MA_API_NOT_FOUND => error.MA_API_NOT_FOUND,
        c.MA_INVALID_DEVICE_CONFIG => error.MA_INVALID_DEVICE_CONFIG,
        c.MA_LOOP => error.MA_LOOP,
        c.MA_BACKEND_NOT_ENABLED => error.MA_BACKEND_NOT_ENABLED,
        c.MA_DEVICE_NOT_INITIALIZED => error.MA_DEVICE_NOT_INITIALIZED,
        c.MA_DEVICE_ALREADY_INITIALIZED => error.MA_DEVICE_ALREADY_INITIALIZED,
        c.MA_DEVICE_NOT_STARTED => error.MA_DEVICE_NOT_STARTED,
        c.MA_DEVICE_NOT_STOPPED => error.MA_DEVICE_NOT_STOPPED,
        c.MA_FAILED_TO_INIT_BACKEND => error.MA_FAILED_TO_INIT_BACKEND,
        c.MA_FAILED_TO_OPEN_BACKEND_DEVICE => error.MA_FAILED_TO_OPEN_BACKEND_DEVICE,
        c.MA_FAILED_TO_START_BACKEND_DEVICE => error.MA_FAILED_TO_START_BACKEND_DEVICE,
        c.MA_FAILED_TO_STOP_BACKEND_DEVICE => error.MA_FAILED_TO_STOP_BACKEND_DEVICE,
        else => unreachable,
    };
}
