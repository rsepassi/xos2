/* automatically generated by rust-bindgen 0.69.4 */

pub type WGPUAdapter = *const crate::WGPUAdapterImpl;
pub type WGPUBindGroup = *const crate::WGPUBindGroupImpl;
pub type WGPUBindGroupLayout = *const crate::WGPUBindGroupLayoutImpl;
pub type WGPUBuffer = *const crate::WGPUBufferImpl;
pub type WGPUCommandBuffer = *const crate::WGPUCommandBufferImpl;
pub type WGPUCommandEncoder = *const crate::WGPUCommandEncoderImpl;
pub type WGPUComputePassEncoder = *const crate::WGPUComputePassEncoderImpl;
pub type WGPUComputePipeline = *const crate::WGPUComputePipelineImpl;
pub type WGPUDevice = *const crate::WGPUDeviceImpl;
pub type WGPUInstance = *const crate::WGPUInstanceImpl;
pub type WGPUPipelineLayout = *const crate::WGPUPipelineLayoutImpl;
pub type WGPUQuerySet = *const crate::WGPUQuerySetImpl;
pub type WGPUQueue = *const crate::WGPUQueueImpl;
pub type WGPURenderBundle = *const crate::WGPURenderBundleImpl;
pub type WGPURenderBundleEncoder = *const crate::WGPURenderBundleEncoderImpl;
pub type WGPURenderPassEncoder = *const crate::WGPURenderPassEncoderImpl;
pub type WGPURenderPipeline = *const crate::WGPURenderPipelineImpl;
pub type WGPUSampler = *const crate::WGPUSamplerImpl;
pub type WGPUShaderModule = *const crate::WGPUShaderModuleImpl;
pub type WGPUSurface = *const crate::WGPUSurfaceImpl;
pub type WGPUTexture = *const crate::WGPUTextureImpl;
pub type WGPUTextureView = *const crate::WGPUTextureViewImpl;

pub const WGPU_ARRAY_LAYER_COUNT_UNDEFINED : u32 = 4294967295 ; pub const WGPU_COPY_STRIDE_UNDEFINED : u32 = 4294967295 ; pub const WGPU_DEPTH_SLICE_UNDEFINED : u32 = 4294967295 ; pub const WGPU_LIMIT_U32_UNDEFINED : u32 = 4294967295 ; pub const WGPU_LIMIT_U64_UNDEFINED : i32 = - 1 ; pub const WGPU_MIP_LEVEL_COUNT_UNDEFINED : u32 = 4294967295 ; pub const WGPU_QUERY_SET_INDEX_UNDEFINED : u32 = 4294967295 ; pub const WGPU_WHOLE_MAP_SIZE : i32 = - 1 ; pub const WGPU_WHOLE_SIZE : i32 = - 1 ; pub type WGPUFlags = u32 ; pub type WGPUBool = u32 ; pub const WGPUAdapterType_DiscreteGPU : WGPUAdapterType = 0 ; pub const WGPUAdapterType_IntegratedGPU : WGPUAdapterType = 1 ; pub const WGPUAdapterType_CPU : WGPUAdapterType = 2 ; pub const WGPUAdapterType_Unknown : WGPUAdapterType = 3 ; pub const WGPUAdapterType_Force32 : WGPUAdapterType = 2147483647 ; pub type WGPUAdapterType = :: std :: os :: raw :: c_uint ; pub const WGPUAddressMode_Repeat : WGPUAddressMode = 0 ; pub const WGPUAddressMode_MirrorRepeat : WGPUAddressMode = 1 ; pub const WGPUAddressMode_ClampToEdge : WGPUAddressMode = 2 ; pub const WGPUAddressMode_Force32 : WGPUAddressMode = 2147483647 ; pub type WGPUAddressMode = :: std :: os :: raw :: c_uint ; pub const WGPUBackendType_Undefined : WGPUBackendType = 0 ; pub const WGPUBackendType_Null : WGPUBackendType = 1 ; pub const WGPUBackendType_WebGPU : WGPUBackendType = 2 ; pub const WGPUBackendType_D3D11 : WGPUBackendType = 3 ; pub const WGPUBackendType_D3D12 : WGPUBackendType = 4 ; pub const WGPUBackendType_Metal : WGPUBackendType = 5 ; pub const WGPUBackendType_Vulkan : WGPUBackendType = 6 ; pub const WGPUBackendType_OpenGL : WGPUBackendType = 7 ; pub const WGPUBackendType_OpenGLES : WGPUBackendType = 8 ; pub const WGPUBackendType_Force32 : WGPUBackendType = 2147483647 ; pub type WGPUBackendType = :: std :: os :: raw :: c_uint ; pub const WGPUBlendFactor_Zero : WGPUBlendFactor = 0 ; pub const WGPUBlendFactor_One : WGPUBlendFactor = 1 ; pub const WGPUBlendFactor_Src : WGPUBlendFactor = 2 ; pub const WGPUBlendFactor_OneMinusSrc : WGPUBlendFactor = 3 ; pub const WGPUBlendFactor_SrcAlpha : WGPUBlendFactor = 4 ; pub const WGPUBlendFactor_OneMinusSrcAlpha : WGPUBlendFactor = 5 ; pub const WGPUBlendFactor_Dst : WGPUBlendFactor = 6 ; pub const WGPUBlendFactor_OneMinusDst : WGPUBlendFactor = 7 ; pub const WGPUBlendFactor_DstAlpha : WGPUBlendFactor = 8 ; pub const WGPUBlendFactor_OneMinusDstAlpha : WGPUBlendFactor = 9 ; pub const WGPUBlendFactor_SrcAlphaSaturated : WGPUBlendFactor = 10 ; pub const WGPUBlendFactor_Constant : WGPUBlendFactor = 11 ; pub const WGPUBlendFactor_OneMinusConstant : WGPUBlendFactor = 12 ; pub const WGPUBlendFactor_Force32 : WGPUBlendFactor = 2147483647 ; pub type WGPUBlendFactor = :: std :: os :: raw :: c_uint ; pub const WGPUBlendOperation_Add : WGPUBlendOperation = 0 ; pub const WGPUBlendOperation_Subtract : WGPUBlendOperation = 1 ; pub const WGPUBlendOperation_ReverseSubtract : WGPUBlendOperation = 2 ; pub const WGPUBlendOperation_Min : WGPUBlendOperation = 3 ; pub const WGPUBlendOperation_Max : WGPUBlendOperation = 4 ; pub const WGPUBlendOperation_Force32 : WGPUBlendOperation = 2147483647 ; pub type WGPUBlendOperation = :: std :: os :: raw :: c_uint ; pub const WGPUBufferBindingType_Undefined : WGPUBufferBindingType = 0 ; pub const WGPUBufferBindingType_Uniform : WGPUBufferBindingType = 1 ; pub const WGPUBufferBindingType_Storage : WGPUBufferBindingType = 2 ; pub const WGPUBufferBindingType_ReadOnlyStorage : WGPUBufferBindingType = 3 ; pub const WGPUBufferBindingType_Force32 : WGPUBufferBindingType = 2147483647 ; pub type WGPUBufferBindingType = :: std :: os :: raw :: c_uint ; pub const WGPUBufferMapAsyncStatus_Success : WGPUBufferMapAsyncStatus = 0 ; pub const WGPUBufferMapAsyncStatus_ValidationError : WGPUBufferMapAsyncStatus = 1 ; pub const WGPUBufferMapAsyncStatus_Unknown : WGPUBufferMapAsyncStatus = 2 ; pub const WGPUBufferMapAsyncStatus_DeviceLost : WGPUBufferMapAsyncStatus = 3 ; pub const WGPUBufferMapAsyncStatus_DestroyedBeforeCallback : WGPUBufferMapAsyncStatus = 4 ; pub const WGPUBufferMapAsyncStatus_UnmappedBeforeCallback : WGPUBufferMapAsyncStatus = 5 ; pub const WGPUBufferMapAsyncStatus_MappingAlreadyPending : WGPUBufferMapAsyncStatus = 6 ; pub const WGPUBufferMapAsyncStatus_OffsetOutOfRange : WGPUBufferMapAsyncStatus = 7 ; pub const WGPUBufferMapAsyncStatus_SizeOutOfRange : WGPUBufferMapAsyncStatus = 8 ; pub const WGPUBufferMapAsyncStatus_Force32 : WGPUBufferMapAsyncStatus = 2147483647 ; pub type WGPUBufferMapAsyncStatus = :: std :: os :: raw :: c_uint ; pub const WGPUBufferMapState_Unmapped : WGPUBufferMapState = 0 ; pub const WGPUBufferMapState_Pending : WGPUBufferMapState = 1 ; pub const WGPUBufferMapState_Mapped : WGPUBufferMapState = 2 ; pub const WGPUBufferMapState_Force32 : WGPUBufferMapState = 2147483647 ; pub type WGPUBufferMapState = :: std :: os :: raw :: c_uint ; pub const WGPUCompareFunction_Undefined : WGPUCompareFunction = 0 ; pub const WGPUCompareFunction_Never : WGPUCompareFunction = 1 ; pub const WGPUCompareFunction_Less : WGPUCompareFunction = 2 ; pub const WGPUCompareFunction_LessEqual : WGPUCompareFunction = 3 ; pub const WGPUCompareFunction_Greater : WGPUCompareFunction = 4 ; pub const WGPUCompareFunction_GreaterEqual : WGPUCompareFunction = 5 ; pub const WGPUCompareFunction_Equal : WGPUCompareFunction = 6 ; pub const WGPUCompareFunction_NotEqual : WGPUCompareFunction = 7 ; pub const WGPUCompareFunction_Always : WGPUCompareFunction = 8 ; pub const WGPUCompareFunction_Force32 : WGPUCompareFunction = 2147483647 ; pub type WGPUCompareFunction = :: std :: os :: raw :: c_uint ; pub const WGPUCompilationInfoRequestStatus_Success : WGPUCompilationInfoRequestStatus = 0 ; pub const WGPUCompilationInfoRequestStatus_Error : WGPUCompilationInfoRequestStatus = 1 ; pub const WGPUCompilationInfoRequestStatus_DeviceLost : WGPUCompilationInfoRequestStatus = 2 ; pub const WGPUCompilationInfoRequestStatus_Unknown : WGPUCompilationInfoRequestStatus = 3 ; pub const WGPUCompilationInfoRequestStatus_Force32 : WGPUCompilationInfoRequestStatus = 2147483647 ; pub type WGPUCompilationInfoRequestStatus = :: std :: os :: raw :: c_uint ; pub const WGPUCompilationMessageType_Error : WGPUCompilationMessageType = 0 ; pub const WGPUCompilationMessageType_Warning : WGPUCompilationMessageType = 1 ; pub const WGPUCompilationMessageType_Info : WGPUCompilationMessageType = 2 ; pub const WGPUCompilationMessageType_Force32 : WGPUCompilationMessageType = 2147483647 ; pub type WGPUCompilationMessageType = :: std :: os :: raw :: c_uint ; pub const WGPUCompositeAlphaMode_Auto : WGPUCompositeAlphaMode = 0 ; pub const WGPUCompositeAlphaMode_Opaque : WGPUCompositeAlphaMode = 1 ; pub const WGPUCompositeAlphaMode_Premultiplied : WGPUCompositeAlphaMode = 2 ; pub const WGPUCompositeAlphaMode_Unpremultiplied : WGPUCompositeAlphaMode = 3 ; pub const WGPUCompositeAlphaMode_Inherit : WGPUCompositeAlphaMode = 4 ; pub const WGPUCompositeAlphaMode_Force32 : WGPUCompositeAlphaMode = 2147483647 ; pub type WGPUCompositeAlphaMode = :: std :: os :: raw :: c_uint ; pub const WGPUCreatePipelineAsyncStatus_Success : WGPUCreatePipelineAsyncStatus = 0 ; pub const WGPUCreatePipelineAsyncStatus_ValidationError : WGPUCreatePipelineAsyncStatus = 1 ; pub const WGPUCreatePipelineAsyncStatus_InternalError : WGPUCreatePipelineAsyncStatus = 2 ; pub const WGPUCreatePipelineAsyncStatus_DeviceLost : WGPUCreatePipelineAsyncStatus = 3 ; pub const WGPUCreatePipelineAsyncStatus_DeviceDestroyed : WGPUCreatePipelineAsyncStatus = 4 ; pub const WGPUCreatePipelineAsyncStatus_Unknown : WGPUCreatePipelineAsyncStatus = 5 ; pub const WGPUCreatePipelineAsyncStatus_Force32 : WGPUCreatePipelineAsyncStatus = 2147483647 ; pub type WGPUCreatePipelineAsyncStatus = :: std :: os :: raw :: c_uint ; pub const WGPUCullMode_None : WGPUCullMode = 0 ; pub const WGPUCullMode_Front : WGPUCullMode = 1 ; pub const WGPUCullMode_Back : WGPUCullMode = 2 ; pub const WGPUCullMode_Force32 : WGPUCullMode = 2147483647 ; pub type WGPUCullMode = :: std :: os :: raw :: c_uint ; pub const WGPUDeviceLostReason_Undefined : WGPUDeviceLostReason = 0 ; pub const WGPUDeviceLostReason_Destroyed : WGPUDeviceLostReason = 1 ; pub const WGPUDeviceLostReason_Force32 : WGPUDeviceLostReason = 2147483647 ; pub type WGPUDeviceLostReason = :: std :: os :: raw :: c_uint ; pub const WGPUErrorFilter_Validation : WGPUErrorFilter = 0 ; pub const WGPUErrorFilter_OutOfMemory : WGPUErrorFilter = 1 ; pub const WGPUErrorFilter_Internal : WGPUErrorFilter = 2 ; pub const WGPUErrorFilter_Force32 : WGPUErrorFilter = 2147483647 ; pub type WGPUErrorFilter = :: std :: os :: raw :: c_uint ; pub const WGPUErrorType_NoError : WGPUErrorType = 0 ; pub const WGPUErrorType_Validation : WGPUErrorType = 1 ; pub const WGPUErrorType_OutOfMemory : WGPUErrorType = 2 ; pub const WGPUErrorType_Internal : WGPUErrorType = 3 ; pub const WGPUErrorType_Unknown : WGPUErrorType = 4 ; pub const WGPUErrorType_DeviceLost : WGPUErrorType = 5 ; pub const WGPUErrorType_Force32 : WGPUErrorType = 2147483647 ; pub type WGPUErrorType = :: std :: os :: raw :: c_uint ; pub const WGPUFeatureName_Undefined : WGPUFeatureName = 0 ; pub const WGPUFeatureName_DepthClipControl : WGPUFeatureName = 1 ; pub const WGPUFeatureName_Depth32FloatStencil8 : WGPUFeatureName = 2 ; pub const WGPUFeatureName_TimestampQuery : WGPUFeatureName = 3 ; pub const WGPUFeatureName_TextureCompressionBC : WGPUFeatureName = 4 ; pub const WGPUFeatureName_TextureCompressionETC2 : WGPUFeatureName = 5 ; pub const WGPUFeatureName_TextureCompressionASTC : WGPUFeatureName = 6 ; pub const WGPUFeatureName_IndirectFirstInstance : WGPUFeatureName = 7 ; pub const WGPUFeatureName_ShaderF16 : WGPUFeatureName = 8 ; pub const WGPUFeatureName_RG11B10UfloatRenderable : WGPUFeatureName = 9 ; pub const WGPUFeatureName_BGRA8UnormStorage : WGPUFeatureName = 10 ; pub const WGPUFeatureName_Float32Filterable : WGPUFeatureName = 11 ; pub const WGPUFeatureName_Force32 : WGPUFeatureName = 2147483647 ; pub type WGPUFeatureName = :: std :: os :: raw :: c_uint ; pub const WGPUFilterMode_Nearest : WGPUFilterMode = 0 ; pub const WGPUFilterMode_Linear : WGPUFilterMode = 1 ; pub const WGPUFilterMode_Force32 : WGPUFilterMode = 2147483647 ; pub type WGPUFilterMode = :: std :: os :: raw :: c_uint ; pub const WGPUFrontFace_CCW : WGPUFrontFace = 0 ; pub const WGPUFrontFace_CW : WGPUFrontFace = 1 ; pub const WGPUFrontFace_Force32 : WGPUFrontFace = 2147483647 ; pub type WGPUFrontFace = :: std :: os :: raw :: c_uint ; pub const WGPUIndexFormat_Undefined : WGPUIndexFormat = 0 ; pub const WGPUIndexFormat_Uint16 : WGPUIndexFormat = 1 ; pub const WGPUIndexFormat_Uint32 : WGPUIndexFormat = 2 ; pub const WGPUIndexFormat_Force32 : WGPUIndexFormat = 2147483647 ; pub type WGPUIndexFormat = :: std :: os :: raw :: c_uint ; pub const WGPULoadOp_Undefined : WGPULoadOp = 0 ; pub const WGPULoadOp_Clear : WGPULoadOp = 1 ; pub const WGPULoadOp_Load : WGPULoadOp = 2 ; pub const WGPULoadOp_Force32 : WGPULoadOp = 2147483647 ; pub type WGPULoadOp = :: std :: os :: raw :: c_uint ; pub const WGPUMipmapFilterMode_Nearest : WGPUMipmapFilterMode = 0 ; pub const WGPUMipmapFilterMode_Linear : WGPUMipmapFilterMode = 1 ; pub const WGPUMipmapFilterMode_Force32 : WGPUMipmapFilterMode = 2147483647 ; pub type WGPUMipmapFilterMode = :: std :: os :: raw :: c_uint ; pub const WGPUPowerPreference_Undefined : WGPUPowerPreference = 0 ; pub const WGPUPowerPreference_LowPower : WGPUPowerPreference = 1 ; pub const WGPUPowerPreference_HighPerformance : WGPUPowerPreference = 2 ; pub const WGPUPowerPreference_Force32 : WGPUPowerPreference = 2147483647 ; pub type WGPUPowerPreference = :: std :: os :: raw :: c_uint ; pub const WGPUPresentMode_Fifo : WGPUPresentMode = 0 ; pub const WGPUPresentMode_FifoRelaxed : WGPUPresentMode = 1 ; pub const WGPUPresentMode_Immediate : WGPUPresentMode = 2 ; pub const WGPUPresentMode_Mailbox : WGPUPresentMode = 3 ; pub const WGPUPresentMode_Force32 : WGPUPresentMode = 2147483647 ; pub type WGPUPresentMode = :: std :: os :: raw :: c_uint ; pub const WGPUPrimitiveTopology_PointList : WGPUPrimitiveTopology = 0 ; pub const WGPUPrimitiveTopology_LineList : WGPUPrimitiveTopology = 1 ; pub const WGPUPrimitiveTopology_LineStrip : WGPUPrimitiveTopology = 2 ; pub const WGPUPrimitiveTopology_TriangleList : WGPUPrimitiveTopology = 3 ; pub const WGPUPrimitiveTopology_TriangleStrip : WGPUPrimitiveTopology = 4 ; pub const WGPUPrimitiveTopology_Force32 : WGPUPrimitiveTopology = 2147483647 ; pub type WGPUPrimitiveTopology = :: std :: os :: raw :: c_uint ; pub const WGPUQueryType_Occlusion : WGPUQueryType = 0 ; pub const WGPUQueryType_Timestamp : WGPUQueryType = 1 ; pub const WGPUQueryType_Force32 : WGPUQueryType = 2147483647 ; pub type WGPUQueryType = :: std :: os :: raw :: c_uint ; pub const WGPUQueueWorkDoneStatus_Success : WGPUQueueWorkDoneStatus = 0 ; pub const WGPUQueueWorkDoneStatus_Error : WGPUQueueWorkDoneStatus = 1 ; pub const WGPUQueueWorkDoneStatus_Unknown : WGPUQueueWorkDoneStatus = 2 ; pub const WGPUQueueWorkDoneStatus_DeviceLost : WGPUQueueWorkDoneStatus = 3 ; pub const WGPUQueueWorkDoneStatus_Force32 : WGPUQueueWorkDoneStatus = 2147483647 ; pub type WGPUQueueWorkDoneStatus = :: std :: os :: raw :: c_uint ; pub const WGPURequestAdapterStatus_Success : WGPURequestAdapterStatus = 0 ; pub const WGPURequestAdapterStatus_Unavailable : WGPURequestAdapterStatus = 1 ; pub const WGPURequestAdapterStatus_Error : WGPURequestAdapterStatus = 2 ; pub const WGPURequestAdapterStatus_Unknown : WGPURequestAdapterStatus = 3 ; pub const WGPURequestAdapterStatus_Force32 : WGPURequestAdapterStatus = 2147483647 ; pub type WGPURequestAdapterStatus = :: std :: os :: raw :: c_uint ; pub const WGPURequestDeviceStatus_Success : WGPURequestDeviceStatus = 0 ; pub const WGPURequestDeviceStatus_Error : WGPURequestDeviceStatus = 1 ; pub const WGPURequestDeviceStatus_Unknown : WGPURequestDeviceStatus = 2 ; pub const WGPURequestDeviceStatus_Force32 : WGPURequestDeviceStatus = 2147483647 ; pub type WGPURequestDeviceStatus = :: std :: os :: raw :: c_uint ; pub const WGPUSType_Invalid : WGPUSType = 0 ; pub const WGPUSType_SurfaceDescriptorFromMetalLayer : WGPUSType = 1 ; pub const WGPUSType_SurfaceDescriptorFromWindowsHWND : WGPUSType = 2 ; pub const WGPUSType_SurfaceDescriptorFromXlibWindow : WGPUSType = 3 ; pub const WGPUSType_SurfaceDescriptorFromCanvasHTMLSelector : WGPUSType = 4 ; pub const WGPUSType_ShaderModuleSPIRVDescriptor : WGPUSType = 5 ; pub const WGPUSType_ShaderModuleWGSLDescriptor : WGPUSType = 6 ; pub const WGPUSType_PrimitiveDepthClipControl : WGPUSType = 7 ; pub const WGPUSType_SurfaceDescriptorFromWaylandSurface : WGPUSType = 8 ; pub const WGPUSType_SurfaceDescriptorFromAndroidNativeWindow : WGPUSType = 9 ; pub const WGPUSType_SurfaceDescriptorFromXcbWindow : WGPUSType = 10 ; pub const WGPUSType_RenderPassDescriptorMaxDrawCount : WGPUSType = 15 ; pub const WGPUSType_Force32 : WGPUSType = 2147483647 ; pub type WGPUSType = :: std :: os :: raw :: c_uint ; pub const WGPUSamplerBindingType_Undefined : WGPUSamplerBindingType = 0 ; pub const WGPUSamplerBindingType_Filtering : WGPUSamplerBindingType = 1 ; pub const WGPUSamplerBindingType_NonFiltering : WGPUSamplerBindingType = 2 ; pub const WGPUSamplerBindingType_Comparison : WGPUSamplerBindingType = 3 ; pub const WGPUSamplerBindingType_Force32 : WGPUSamplerBindingType = 2147483647 ; pub type WGPUSamplerBindingType = :: std :: os :: raw :: c_uint ; pub const WGPUStencilOperation_Keep : WGPUStencilOperation = 0 ; pub const WGPUStencilOperation_Zero : WGPUStencilOperation = 1 ; pub const WGPUStencilOperation_Replace : WGPUStencilOperation = 2 ; pub const WGPUStencilOperation_Invert : WGPUStencilOperation = 3 ; pub const WGPUStencilOperation_IncrementClamp : WGPUStencilOperation = 4 ; pub const WGPUStencilOperation_DecrementClamp : WGPUStencilOperation = 5 ; pub const WGPUStencilOperation_IncrementWrap : WGPUStencilOperation = 6 ; pub const WGPUStencilOperation_DecrementWrap : WGPUStencilOperation = 7 ; pub const WGPUStencilOperation_Force32 : WGPUStencilOperation = 2147483647 ; pub type WGPUStencilOperation = :: std :: os :: raw :: c_uint ; pub const WGPUStorageTextureAccess_Undefined : WGPUStorageTextureAccess = 0 ; pub const WGPUStorageTextureAccess_WriteOnly : WGPUStorageTextureAccess = 1 ; pub const WGPUStorageTextureAccess_ReadOnly : WGPUStorageTextureAccess = 2 ; pub const WGPUStorageTextureAccess_ReadWrite : WGPUStorageTextureAccess = 3 ; pub const WGPUStorageTextureAccess_Force32 : WGPUStorageTextureAccess = 2147483647 ; pub type WGPUStorageTextureAccess = :: std :: os :: raw :: c_uint ; pub const WGPUStoreOp_Undefined : WGPUStoreOp = 0 ; pub const WGPUStoreOp_Store : WGPUStoreOp = 1 ; pub const WGPUStoreOp_Discard : WGPUStoreOp = 2 ; pub const WGPUStoreOp_Force32 : WGPUStoreOp = 2147483647 ; pub type WGPUStoreOp = :: std :: os :: raw :: c_uint ; pub const WGPUSurfaceGetCurrentTextureStatus_Success : WGPUSurfaceGetCurrentTextureStatus = 0 ; pub const WGPUSurfaceGetCurrentTextureStatus_Timeout : WGPUSurfaceGetCurrentTextureStatus = 1 ; pub const WGPUSurfaceGetCurrentTextureStatus_Outdated : WGPUSurfaceGetCurrentTextureStatus = 2 ; pub const WGPUSurfaceGetCurrentTextureStatus_Lost : WGPUSurfaceGetCurrentTextureStatus = 3 ; pub const WGPUSurfaceGetCurrentTextureStatus_OutOfMemory : WGPUSurfaceGetCurrentTextureStatus = 4 ; pub const WGPUSurfaceGetCurrentTextureStatus_DeviceLost : WGPUSurfaceGetCurrentTextureStatus = 5 ; pub const WGPUSurfaceGetCurrentTextureStatus_Force32 : WGPUSurfaceGetCurrentTextureStatus = 2147483647 ; pub type WGPUSurfaceGetCurrentTextureStatus = :: std :: os :: raw :: c_uint ; pub const WGPUTextureAspect_All : WGPUTextureAspect = 0 ; pub const WGPUTextureAspect_StencilOnly : WGPUTextureAspect = 1 ; pub const WGPUTextureAspect_DepthOnly : WGPUTextureAspect = 2 ; pub const WGPUTextureAspect_Force32 : WGPUTextureAspect = 2147483647 ; pub type WGPUTextureAspect = :: std :: os :: raw :: c_uint ; pub const WGPUTextureDimension_1D : WGPUTextureDimension = 0 ; pub const WGPUTextureDimension_2D : WGPUTextureDimension = 1 ; pub const WGPUTextureDimension_3D : WGPUTextureDimension = 2 ; pub const WGPUTextureDimension_Force32 : WGPUTextureDimension = 2147483647 ; pub type WGPUTextureDimension = :: std :: os :: raw :: c_uint ; pub const WGPUTextureFormat_Undefined : WGPUTextureFormat = 0 ; pub const WGPUTextureFormat_R8Unorm : WGPUTextureFormat = 1 ; pub const WGPUTextureFormat_R8Snorm : WGPUTextureFormat = 2 ; pub const WGPUTextureFormat_R8Uint : WGPUTextureFormat = 3 ; pub const WGPUTextureFormat_R8Sint : WGPUTextureFormat = 4 ; pub const WGPUTextureFormat_R16Uint : WGPUTextureFormat = 5 ; pub const WGPUTextureFormat_R16Sint : WGPUTextureFormat = 6 ; pub const WGPUTextureFormat_R16Float : WGPUTextureFormat = 7 ; pub const WGPUTextureFormat_RG8Unorm : WGPUTextureFormat = 8 ; pub const WGPUTextureFormat_RG8Snorm : WGPUTextureFormat = 9 ; pub const WGPUTextureFormat_RG8Uint : WGPUTextureFormat = 10 ; pub const WGPUTextureFormat_RG8Sint : WGPUTextureFormat = 11 ; pub const WGPUTextureFormat_R32Float : WGPUTextureFormat = 12 ; pub const WGPUTextureFormat_R32Uint : WGPUTextureFormat = 13 ; pub const WGPUTextureFormat_R32Sint : WGPUTextureFormat = 14 ; pub const WGPUTextureFormat_RG16Uint : WGPUTextureFormat = 15 ; pub const WGPUTextureFormat_RG16Sint : WGPUTextureFormat = 16 ; pub const WGPUTextureFormat_RG16Float : WGPUTextureFormat = 17 ; pub const WGPUTextureFormat_RGBA8Unorm : WGPUTextureFormat = 18 ; pub const WGPUTextureFormat_RGBA8UnormSrgb : WGPUTextureFormat = 19 ; pub const WGPUTextureFormat_RGBA8Snorm : WGPUTextureFormat = 20 ; pub const WGPUTextureFormat_RGBA8Uint : WGPUTextureFormat = 21 ; pub const WGPUTextureFormat_RGBA8Sint : WGPUTextureFormat = 22 ; pub const WGPUTextureFormat_BGRA8Unorm : WGPUTextureFormat = 23 ; pub const WGPUTextureFormat_BGRA8UnormSrgb : WGPUTextureFormat = 24 ; pub const WGPUTextureFormat_RGB10A2Uint : WGPUTextureFormat = 25 ; pub const WGPUTextureFormat_RGB10A2Unorm : WGPUTextureFormat = 26 ; pub const WGPUTextureFormat_RG11B10Ufloat : WGPUTextureFormat = 27 ; pub const WGPUTextureFormat_RGB9E5Ufloat : WGPUTextureFormat = 28 ; pub const WGPUTextureFormat_RG32Float : WGPUTextureFormat = 29 ; pub const WGPUTextureFormat_RG32Uint : WGPUTextureFormat = 30 ; pub const WGPUTextureFormat_RG32Sint : WGPUTextureFormat = 31 ; pub const WGPUTextureFormat_RGBA16Uint : WGPUTextureFormat = 32 ; pub const WGPUTextureFormat_RGBA16Sint : WGPUTextureFormat = 33 ; pub const WGPUTextureFormat_RGBA16Float : WGPUTextureFormat = 34 ; pub const WGPUTextureFormat_RGBA32Float : WGPUTextureFormat = 35 ; pub const WGPUTextureFormat_RGBA32Uint : WGPUTextureFormat = 36 ; pub const WGPUTextureFormat_RGBA32Sint : WGPUTextureFormat = 37 ; pub const WGPUTextureFormat_Stencil8 : WGPUTextureFormat = 38 ; pub const WGPUTextureFormat_Depth16Unorm : WGPUTextureFormat = 39 ; pub const WGPUTextureFormat_Depth24Plus : WGPUTextureFormat = 40 ; pub const WGPUTextureFormat_Depth24PlusStencil8 : WGPUTextureFormat = 41 ; pub const WGPUTextureFormat_Depth32Float : WGPUTextureFormat = 42 ; pub const WGPUTextureFormat_Depth32FloatStencil8 : WGPUTextureFormat = 43 ; pub const WGPUTextureFormat_BC1RGBAUnorm : WGPUTextureFormat = 44 ; pub const WGPUTextureFormat_BC1RGBAUnormSrgb : WGPUTextureFormat = 45 ; pub const WGPUTextureFormat_BC2RGBAUnorm : WGPUTextureFormat = 46 ; pub const WGPUTextureFormat_BC2RGBAUnormSrgb : WGPUTextureFormat = 47 ; pub const WGPUTextureFormat_BC3RGBAUnorm : WGPUTextureFormat = 48 ; pub const WGPUTextureFormat_BC3RGBAUnormSrgb : WGPUTextureFormat = 49 ; pub const WGPUTextureFormat_BC4RUnorm : WGPUTextureFormat = 50 ; pub const WGPUTextureFormat_BC4RSnorm : WGPUTextureFormat = 51 ; pub const WGPUTextureFormat_BC5RGUnorm : WGPUTextureFormat = 52 ; pub const WGPUTextureFormat_BC5RGSnorm : WGPUTextureFormat = 53 ; pub const WGPUTextureFormat_BC6HRGBUfloat : WGPUTextureFormat = 54 ; pub const WGPUTextureFormat_BC6HRGBFloat : WGPUTextureFormat = 55 ; pub const WGPUTextureFormat_BC7RGBAUnorm : WGPUTextureFormat = 56 ; pub const WGPUTextureFormat_BC7RGBAUnormSrgb : WGPUTextureFormat = 57 ; pub const WGPUTextureFormat_ETC2RGB8Unorm : WGPUTextureFormat = 58 ; pub const WGPUTextureFormat_ETC2RGB8UnormSrgb : WGPUTextureFormat = 59 ; pub const WGPUTextureFormat_ETC2RGB8A1Unorm : WGPUTextureFormat = 60 ; pub const WGPUTextureFormat_ETC2RGB8A1UnormSrgb : WGPUTextureFormat = 61 ; pub const WGPUTextureFormat_ETC2RGBA8Unorm : WGPUTextureFormat = 62 ; pub const WGPUTextureFormat_ETC2RGBA8UnormSrgb : WGPUTextureFormat = 63 ; pub const WGPUTextureFormat_EACR11Unorm : WGPUTextureFormat = 64 ; pub const WGPUTextureFormat_EACR11Snorm : WGPUTextureFormat = 65 ; pub const WGPUTextureFormat_EACRG11Unorm : WGPUTextureFormat = 66 ; pub const WGPUTextureFormat_EACRG11Snorm : WGPUTextureFormat = 67 ; pub const WGPUTextureFormat_ASTC4x4Unorm : WGPUTextureFormat = 68 ; pub const WGPUTextureFormat_ASTC4x4UnormSrgb : WGPUTextureFormat = 69 ; pub const WGPUTextureFormat_ASTC5x4Unorm : WGPUTextureFormat = 70 ; pub const WGPUTextureFormat_ASTC5x4UnormSrgb : WGPUTextureFormat = 71 ; pub const WGPUTextureFormat_ASTC5x5Unorm : WGPUTextureFormat = 72 ; pub const WGPUTextureFormat_ASTC5x5UnormSrgb : WGPUTextureFormat = 73 ; pub const WGPUTextureFormat_ASTC6x5Unorm : WGPUTextureFormat = 74 ; pub const WGPUTextureFormat_ASTC6x5UnormSrgb : WGPUTextureFormat = 75 ; pub const WGPUTextureFormat_ASTC6x6Unorm : WGPUTextureFormat = 76 ; pub const WGPUTextureFormat_ASTC6x6UnormSrgb : WGPUTextureFormat = 77 ; pub const WGPUTextureFormat_ASTC8x5Unorm : WGPUTextureFormat = 78 ; pub const WGPUTextureFormat_ASTC8x5UnormSrgb : WGPUTextureFormat = 79 ; pub const WGPUTextureFormat_ASTC8x6Unorm : WGPUTextureFormat = 80 ; pub const WGPUTextureFormat_ASTC8x6UnormSrgb : WGPUTextureFormat = 81 ; pub const WGPUTextureFormat_ASTC8x8Unorm : WGPUTextureFormat = 82 ; pub const WGPUTextureFormat_ASTC8x8UnormSrgb : WGPUTextureFormat = 83 ; pub const WGPUTextureFormat_ASTC10x5Unorm : WGPUTextureFormat = 84 ; pub const WGPUTextureFormat_ASTC10x5UnormSrgb : WGPUTextureFormat = 85 ; pub const WGPUTextureFormat_ASTC10x6Unorm : WGPUTextureFormat = 86 ; pub const WGPUTextureFormat_ASTC10x6UnormSrgb : WGPUTextureFormat = 87 ; pub const WGPUTextureFormat_ASTC10x8Unorm : WGPUTextureFormat = 88 ; pub const WGPUTextureFormat_ASTC10x8UnormSrgb : WGPUTextureFormat = 89 ; pub const WGPUTextureFormat_ASTC10x10Unorm : WGPUTextureFormat = 90 ; pub const WGPUTextureFormat_ASTC10x10UnormSrgb : WGPUTextureFormat = 91 ; pub const WGPUTextureFormat_ASTC12x10Unorm : WGPUTextureFormat = 92 ; pub const WGPUTextureFormat_ASTC12x10UnormSrgb : WGPUTextureFormat = 93 ; pub const WGPUTextureFormat_ASTC12x12Unorm : WGPUTextureFormat = 94 ; pub const WGPUTextureFormat_ASTC12x12UnormSrgb : WGPUTextureFormat = 95 ; pub const WGPUTextureFormat_Force32 : WGPUTextureFormat = 2147483647 ; pub type WGPUTextureFormat = :: std :: os :: raw :: c_uint ; pub const WGPUTextureSampleType_Undefined : WGPUTextureSampleType = 0 ; pub const WGPUTextureSampleType_Float : WGPUTextureSampleType = 1 ; pub const WGPUTextureSampleType_UnfilterableFloat : WGPUTextureSampleType = 2 ; pub const WGPUTextureSampleType_Depth : WGPUTextureSampleType = 3 ; pub const WGPUTextureSampleType_Sint : WGPUTextureSampleType = 4 ; pub const WGPUTextureSampleType_Uint : WGPUTextureSampleType = 5 ; pub const WGPUTextureSampleType_Force32 : WGPUTextureSampleType = 2147483647 ; pub type WGPUTextureSampleType = :: std :: os :: raw :: c_uint ; pub const WGPUTextureViewDimension_Undefined : WGPUTextureViewDimension = 0 ; pub const WGPUTextureViewDimension_1D : WGPUTextureViewDimension = 1 ; pub const WGPUTextureViewDimension_2D : WGPUTextureViewDimension = 2 ; pub const WGPUTextureViewDimension_2DArray : WGPUTextureViewDimension = 3 ; pub const WGPUTextureViewDimension_Cube : WGPUTextureViewDimension = 4 ; pub const WGPUTextureViewDimension_CubeArray : WGPUTextureViewDimension = 5 ; pub const WGPUTextureViewDimension_3D : WGPUTextureViewDimension = 6 ; pub const WGPUTextureViewDimension_Force32 : WGPUTextureViewDimension = 2147483647 ; pub type WGPUTextureViewDimension = :: std :: os :: raw :: c_uint ; pub const WGPUVertexFormat_Undefined : WGPUVertexFormat = 0 ; pub const WGPUVertexFormat_Uint8x2 : WGPUVertexFormat = 1 ; pub const WGPUVertexFormat_Uint8x4 : WGPUVertexFormat = 2 ; pub const WGPUVertexFormat_Sint8x2 : WGPUVertexFormat = 3 ; pub const WGPUVertexFormat_Sint8x4 : WGPUVertexFormat = 4 ; pub const WGPUVertexFormat_Unorm8x2 : WGPUVertexFormat = 5 ; pub const WGPUVertexFormat_Unorm8x4 : WGPUVertexFormat = 6 ; pub const WGPUVertexFormat_Snorm8x2 : WGPUVertexFormat = 7 ; pub const WGPUVertexFormat_Snorm8x4 : WGPUVertexFormat = 8 ; pub const WGPUVertexFormat_Uint16x2 : WGPUVertexFormat = 9 ; pub const WGPUVertexFormat_Uint16x4 : WGPUVertexFormat = 10 ; pub const WGPUVertexFormat_Sint16x2 : WGPUVertexFormat = 11 ; pub const WGPUVertexFormat_Sint16x4 : WGPUVertexFormat = 12 ; pub const WGPUVertexFormat_Unorm16x2 : WGPUVertexFormat = 13 ; pub const WGPUVertexFormat_Unorm16x4 : WGPUVertexFormat = 14 ; pub const WGPUVertexFormat_Snorm16x2 : WGPUVertexFormat = 15 ; pub const WGPUVertexFormat_Snorm16x4 : WGPUVertexFormat = 16 ; pub const WGPUVertexFormat_Float16x2 : WGPUVertexFormat = 17 ; pub const WGPUVertexFormat_Float16x4 : WGPUVertexFormat = 18 ; pub const WGPUVertexFormat_Float32 : WGPUVertexFormat = 19 ; pub const WGPUVertexFormat_Float32x2 : WGPUVertexFormat = 20 ; pub const WGPUVertexFormat_Float32x3 : WGPUVertexFormat = 21 ; pub const WGPUVertexFormat_Float32x4 : WGPUVertexFormat = 22 ; pub const WGPUVertexFormat_Uint32 : WGPUVertexFormat = 23 ; pub const WGPUVertexFormat_Uint32x2 : WGPUVertexFormat = 24 ; pub const WGPUVertexFormat_Uint32x3 : WGPUVertexFormat = 25 ; pub const WGPUVertexFormat_Uint32x4 : WGPUVertexFormat = 26 ; pub const WGPUVertexFormat_Sint32 : WGPUVertexFormat = 27 ; pub const WGPUVertexFormat_Sint32x2 : WGPUVertexFormat = 28 ; pub const WGPUVertexFormat_Sint32x3 : WGPUVertexFormat = 29 ; pub const WGPUVertexFormat_Sint32x4 : WGPUVertexFormat = 30 ; pub const WGPUVertexFormat_Force32 : WGPUVertexFormat = 2147483647 ; pub type WGPUVertexFormat = :: std :: os :: raw :: c_uint ; pub const WGPUVertexStepMode_Vertex : WGPUVertexStepMode = 0 ; pub const WGPUVertexStepMode_Instance : WGPUVertexStepMode = 1 ; pub const WGPUVertexStepMode_VertexBufferNotUsed : WGPUVertexStepMode = 2 ; pub const WGPUVertexStepMode_Force32 : WGPUVertexStepMode = 2147483647 ; pub type WGPUVertexStepMode = :: std :: os :: raw :: c_uint ; pub const WGPUWGSLFeatureName_Undefined : WGPUWGSLFeatureName = 0 ; pub const WGPUWGSLFeatureName_ReadonlyAndReadwriteStorageTextures : WGPUWGSLFeatureName = 1 ; pub const WGPUWGSLFeatureName_Packed4x8IntegerDotProduct : WGPUWGSLFeatureName = 2 ; pub const WGPUWGSLFeatureName_UnrestrictedPointerParameters : WGPUWGSLFeatureName = 3 ; pub const WGPUWGSLFeatureName_PointerCompositeAccess : WGPUWGSLFeatureName = 4 ; pub const WGPUWGSLFeatureName_Force32 : WGPUWGSLFeatureName = 2147483647 ; pub type WGPUWGSLFeatureName = :: std :: os :: raw :: c_uint ; pub const WGPUBufferUsage_None : WGPUBufferUsage = 0 ; pub const WGPUBufferUsage_MapRead : WGPUBufferUsage = 1 ; pub const WGPUBufferUsage_MapWrite : WGPUBufferUsage = 2 ; pub const WGPUBufferUsage_CopySrc : WGPUBufferUsage = 4 ; pub const WGPUBufferUsage_CopyDst : WGPUBufferUsage = 8 ; pub const WGPUBufferUsage_Index : WGPUBufferUsage = 16 ; pub const WGPUBufferUsage_Vertex : WGPUBufferUsage = 32 ; pub const WGPUBufferUsage_Uniform : WGPUBufferUsage = 64 ; pub const WGPUBufferUsage_Storage : WGPUBufferUsage = 128 ; pub const WGPUBufferUsage_Indirect : WGPUBufferUsage = 256 ; pub const WGPUBufferUsage_QueryResolve : WGPUBufferUsage = 512 ; pub const WGPUBufferUsage_Force32 : WGPUBufferUsage = 2147483647 ; pub type WGPUBufferUsage = :: std :: os :: raw :: c_uint ; pub type WGPUBufferUsageFlags = WGPUFlags ; pub const WGPUColorWriteMask_None : WGPUColorWriteMask = 0 ; pub const WGPUColorWriteMask_Red : WGPUColorWriteMask = 1 ; pub const WGPUColorWriteMask_Green : WGPUColorWriteMask = 2 ; pub const WGPUColorWriteMask_Blue : WGPUColorWriteMask = 4 ; pub const WGPUColorWriteMask_Alpha : WGPUColorWriteMask = 8 ; pub const WGPUColorWriteMask_All : WGPUColorWriteMask = 15 ; pub const WGPUColorWriteMask_Force32 : WGPUColorWriteMask = 2147483647 ; pub type WGPUColorWriteMask = :: std :: os :: raw :: c_uint ; pub type WGPUColorWriteMaskFlags = WGPUFlags ; pub const WGPUMapMode_None : WGPUMapMode = 0 ; pub const WGPUMapMode_Read : WGPUMapMode = 1 ; pub const WGPUMapMode_Write : WGPUMapMode = 2 ; pub const WGPUMapMode_Force32 : WGPUMapMode = 2147483647 ; pub type WGPUMapMode = :: std :: os :: raw :: c_uint ; pub type WGPUMapModeFlags = WGPUFlags ; pub const WGPUShaderStage_None : WGPUShaderStage = 0 ; pub const WGPUShaderStage_Vertex : WGPUShaderStage = 1 ; pub const WGPUShaderStage_Fragment : WGPUShaderStage = 2 ; pub const WGPUShaderStage_Compute : WGPUShaderStage = 4 ; pub const WGPUShaderStage_Force32 : WGPUShaderStage = 2147483647 ; pub type WGPUShaderStage = :: std :: os :: raw :: c_uint ; pub type WGPUShaderStageFlags = WGPUFlags ; pub const WGPUTextureUsage_None : WGPUTextureUsage = 0 ; pub const WGPUTextureUsage_CopySrc : WGPUTextureUsage = 1 ; pub const WGPUTextureUsage_CopyDst : WGPUTextureUsage = 2 ; pub const WGPUTextureUsage_TextureBinding : WGPUTextureUsage = 4 ; pub const WGPUTextureUsage_StorageBinding : WGPUTextureUsage = 8 ; pub const WGPUTextureUsage_RenderAttachment : WGPUTextureUsage = 16 ; pub const WGPUTextureUsage_Force32 : WGPUTextureUsage = 2147483647 ; pub type WGPUTextureUsage = :: std :: os :: raw :: c_uint ; pub type WGPUTextureUsageFlags = WGPUFlags ; pub type WGPUProc = :: std :: option :: Option < unsafe extern "C" fn () > ; pub type WGPUDeviceLostCallback = :: std :: option :: Option < unsafe extern "C" fn (reason : WGPUDeviceLostReason , message : * const :: std :: os :: raw :: c_char , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUErrorCallback = :: std :: option :: Option < unsafe extern "C" fn (type_ : WGPUErrorType , message : * const :: std :: os :: raw :: c_char , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUAdapterRequestAdapterInfoCallback = :: std :: option :: Option < unsafe extern "C" fn (adapterInfo : WGPUAdapterInfo , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUAdapterRequestDeviceCallback = :: std :: option :: Option < unsafe extern "C" fn (status : WGPURequestDeviceStatus , device : WGPUDevice , message : * const :: std :: os :: raw :: c_char , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUBufferMapAsyncCallback = :: std :: option :: Option < unsafe extern "C" fn (status : WGPUBufferMapAsyncStatus , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUDeviceCreateComputePipelineAsyncCallback = :: std :: option :: Option < unsafe extern "C" fn (status : WGPUCreatePipelineAsyncStatus , pipeline : WGPUComputePipeline , message : * const :: std :: os :: raw :: c_char , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUDeviceCreateRenderPipelineAsyncCallback = :: std :: option :: Option < unsafe extern "C" fn (status : WGPUCreatePipelineAsyncStatus , pipeline : WGPURenderPipeline , message : * const :: std :: os :: raw :: c_char , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUInstanceRequestAdapterCallback = :: std :: option :: Option < unsafe extern "C" fn (status : WGPURequestAdapterStatus , adapter : WGPUAdapter , message : * const :: std :: os :: raw :: c_char , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUQueueOnSubmittedWorkDoneCallback = :: std :: option :: Option < unsafe extern "C" fn (status : WGPUQueueWorkDoneStatus , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUShaderModuleGetCompilationInfoCallback = :: std :: option :: Option < unsafe extern "C" fn (status : WGPUCompilationInfoRequestStatus , compilationInfo : * const WGPUCompilationInfo , userdata : * mut :: std :: os :: raw :: c_void) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUChainedStruct { pub next : * const WGPUChainedStruct , pub sType : WGPUSType , } # [test] fn bindgen_test_layout_WGPUChainedStruct () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUChainedStruct > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUChainedStruct > () , 16usize , concat ! ("Size of: " , stringify ! (WGPUChainedStruct))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUChainedStruct > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUChainedStruct))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . next) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUChainedStruct) , "::" , stringify ! (next))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . sType) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUChainedStruct) , "::" , stringify ! (sType))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUChainedStructOut { pub next : * mut WGPUChainedStructOut , pub sType : WGPUSType , } # [test] fn bindgen_test_layout_WGPUChainedStructOut () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUChainedStructOut > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUChainedStructOut > () , 16usize , concat ! ("Size of: " , stringify ! (WGPUChainedStructOut))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUChainedStructOut > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUChainedStructOut))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . next) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUChainedStructOut) , "::" , stringify ! (next))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . sType) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUChainedStructOut) , "::" , stringify ! (sType))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUAdapterInfo { pub vendor : * const :: std :: os :: raw :: c_char , pub architecture : * const :: std :: os :: raw :: c_char , pub device : * const :: std :: os :: raw :: c_char , pub description : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_WGPUAdapterInfo () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUAdapterInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUAdapterInfo > () , 32usize , concat ! ("Size of: " , stringify ! (WGPUAdapterInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUAdapterInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUAdapterInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . vendor) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUAdapterInfo) , "::" , stringify ! (vendor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . architecture) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUAdapterInfo) , "::" , stringify ! (architecture))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . device) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUAdapterInfo) , "::" , stringify ! (device))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . description) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUAdapterInfo) , "::" , stringify ! (description))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUAdapterProperties { pub nextInChain : * mut WGPUChainedStructOut , pub vendorID : u32 , pub vendorName : * const :: std :: os :: raw :: c_char , pub architecture : * const :: std :: os :: raw :: c_char , pub deviceID : u32 , pub name : * const :: std :: os :: raw :: c_char , pub driverDescription : * const :: std :: os :: raw :: c_char , pub adapterType : WGPUAdapterType , pub backendType : WGPUBackendType , } # [test] fn bindgen_test_layout_WGPUAdapterProperties () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUAdapterProperties > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUAdapterProperties > () , 64usize , concat ! ("Size of: " , stringify ! (WGPUAdapterProperties))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUAdapterProperties > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUAdapterProperties))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUAdapterProperties) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . vendorID) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUAdapterProperties) , "::" , stringify ! (vendorID))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . vendorName) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUAdapterProperties) , "::" , stringify ! (vendorName))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . architecture) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUAdapterProperties) , "::" , stringify ! (architecture))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . deviceID) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUAdapterProperties) , "::" , stringify ! (deviceID))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . name) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUAdapterProperties) , "::" , stringify ! (name))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . driverDescription) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (WGPUAdapterProperties) , "::" , stringify ! (driverDescription))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . adapterType) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (WGPUAdapterProperties) , "::" , stringify ! (adapterType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . backendType) as usize - ptr as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (WGPUAdapterProperties) , "::" , stringify ! (backendType))) ; } # [repr (C)] pub struct WGPUBindGroupEntry { pub nextInChain : * const WGPUChainedStruct , pub binding : u32 , pub buffer : WGPUBuffer , pub offset : u64 , pub size : u64 , pub sampler : WGPUSampler , pub textureView : WGPUTextureView , } # [test] fn bindgen_test_layout_WGPUBindGroupEntry () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUBindGroupEntry > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUBindGroupEntry > () , 56usize , concat ! ("Size of: " , stringify ! (WGPUBindGroupEntry))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUBindGroupEntry > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUBindGroupEntry))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupEntry) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . binding) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupEntry) , "::" , stringify ! (binding))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . buffer) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupEntry) , "::" , stringify ! (buffer))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . offset) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupEntry) , "::" , stringify ! (offset))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . size) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupEntry) , "::" , stringify ! (size))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . sampler) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupEntry) , "::" , stringify ! (sampler))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . textureView) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupEntry) , "::" , stringify ! (textureView))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUBlendComponent { pub operation : WGPUBlendOperation , pub srcFactor : WGPUBlendFactor , pub dstFactor : WGPUBlendFactor , } # [test] fn bindgen_test_layout_WGPUBlendComponent () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUBlendComponent > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUBlendComponent > () , 12usize , concat ! ("Size of: " , stringify ! (WGPUBlendComponent))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUBlendComponent > () , 4usize , concat ! ("Alignment of " , stringify ! (WGPUBlendComponent))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . operation) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUBlendComponent) , "::" , stringify ! (operation))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . srcFactor) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (WGPUBlendComponent) , "::" , stringify ! (srcFactor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . dstFactor) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUBlendComponent) , "::" , stringify ! (dstFactor))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUBufferBindingLayout { pub nextInChain : * const WGPUChainedStruct , pub type_ : WGPUBufferBindingType , pub hasDynamicOffset : WGPUBool , pub minBindingSize : u64 , } # [test] fn bindgen_test_layout_WGPUBufferBindingLayout () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUBufferBindingLayout > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUBufferBindingLayout > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUBufferBindingLayout))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUBufferBindingLayout > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUBufferBindingLayout))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUBufferBindingLayout) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . type_) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUBufferBindingLayout) , "::" , stringify ! (type_))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . hasDynamicOffset) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (WGPUBufferBindingLayout) , "::" , stringify ! (hasDynamicOffset))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . minBindingSize) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUBufferBindingLayout) , "::" , stringify ! (minBindingSize))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUBufferDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , pub usage : WGPUBufferUsageFlags , pub size : u64 , pub mappedAtCreation : WGPUBool , } # [test] fn bindgen_test_layout_WGPUBufferDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUBufferDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUBufferDescriptor > () , 40usize , concat ! ("Size of: " , stringify ! (WGPUBufferDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUBufferDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUBufferDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUBufferDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUBufferDescriptor) , "::" , stringify ! (label))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . usage) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUBufferDescriptor) , "::" , stringify ! (usage))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . size) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUBufferDescriptor) , "::" , stringify ! (size))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . mappedAtCreation) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUBufferDescriptor) , "::" , stringify ! (mappedAtCreation))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUColor { pub r : f64 , pub g : f64 , pub b : f64 , pub a : f64 , } # [test] fn bindgen_test_layout_WGPUColor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUColor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUColor > () , 32usize , concat ! ("Size of: " , stringify ! (WGPUColor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUColor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUColor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . r) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUColor) , "::" , stringify ! (r))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . g) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUColor) , "::" , stringify ! (g))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . b) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUColor) , "::" , stringify ! (b))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . a) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUColor) , "::" , stringify ! (a))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUCommandBufferDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_WGPUCommandBufferDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUCommandBufferDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUCommandBufferDescriptor > () , 16usize , concat ! ("Size of: " , stringify ! (WGPUCommandBufferDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUCommandBufferDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUCommandBufferDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUCommandBufferDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUCommandBufferDescriptor) , "::" , stringify ! (label))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUCommandEncoderDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_WGPUCommandEncoderDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUCommandEncoderDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUCommandEncoderDescriptor > () , 16usize , concat ! ("Size of: " , stringify ! (WGPUCommandEncoderDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUCommandEncoderDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUCommandEncoderDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUCommandEncoderDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUCommandEncoderDescriptor) , "::" , stringify ! (label))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUCompilationMessage { pub nextInChain : * const WGPUChainedStruct , pub message : * const :: std :: os :: raw :: c_char , pub type_ : WGPUCompilationMessageType , pub lineNum : u64 , pub linePos : u64 , pub offset : u64 , pub length : u64 , pub utf16LinePos : u64 , pub utf16Offset : u64 , pub utf16Length : u64 , } # [test] fn bindgen_test_layout_WGPUCompilationMessage () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUCompilationMessage > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUCompilationMessage > () , 80usize , concat ! ("Size of: " , stringify ! (WGPUCompilationMessage))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUCompilationMessage > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUCompilationMessage))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUCompilationMessage) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . message) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUCompilationMessage) , "::" , stringify ! (message))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . type_) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUCompilationMessage) , "::" , stringify ! (type_))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . lineNum) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUCompilationMessage) , "::" , stringify ! (lineNum))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . linePos) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUCompilationMessage) , "::" , stringify ! (linePos))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . offset) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUCompilationMessage) , "::" , stringify ! (offset))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . length) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (WGPUCompilationMessage) , "::" , stringify ! (length))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . utf16LinePos) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (WGPUCompilationMessage) , "::" , stringify ! (utf16LinePos))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . utf16Offset) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (WGPUCompilationMessage) , "::" , stringify ! (utf16Offset))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . utf16Length) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (WGPUCompilationMessage) , "::" , stringify ! (utf16Length))) ; } # [repr (C)] pub struct WGPUComputePassTimestampWrites { pub querySet : WGPUQuerySet , pub beginningOfPassWriteIndex : u32 , pub endOfPassWriteIndex : u32 , } # [test] fn bindgen_test_layout_WGPUComputePassTimestampWrites () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUComputePassTimestampWrites > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUComputePassTimestampWrites > () , 16usize , concat ! ("Size of: " , stringify ! (WGPUComputePassTimestampWrites))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUComputePassTimestampWrites > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUComputePassTimestampWrites))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . querySet) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUComputePassTimestampWrites) , "::" , stringify ! (querySet))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . beginningOfPassWriteIndex) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUComputePassTimestampWrites) , "::" , stringify ! (beginningOfPassWriteIndex))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . endOfPassWriteIndex) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (WGPUComputePassTimestampWrites) , "::" , stringify ! (endOfPassWriteIndex))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUConstantEntry { pub nextInChain : * const WGPUChainedStruct , pub key : * const :: std :: os :: raw :: c_char , pub value : f64 , } # [test] fn bindgen_test_layout_WGPUConstantEntry () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUConstantEntry > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUConstantEntry > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUConstantEntry))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUConstantEntry > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUConstantEntry))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUConstantEntry) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . key) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUConstantEntry) , "::" , stringify ! (key))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . value) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUConstantEntry) , "::" , stringify ! (value))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUExtent3D { pub width : u32 , pub height : u32 , pub depthOrArrayLayers : u32 , } # [test] fn bindgen_test_layout_WGPUExtent3D () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUExtent3D > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUExtent3D > () , 12usize , concat ! ("Size of: " , stringify ! (WGPUExtent3D))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUExtent3D > () , 4usize , concat ! ("Alignment of " , stringify ! (WGPUExtent3D))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . width) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUExtent3D) , "::" , stringify ! (width))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . height) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (WGPUExtent3D) , "::" , stringify ! (height))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . depthOrArrayLayers) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUExtent3D) , "::" , stringify ! (depthOrArrayLayers))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUInstanceDescriptor { pub nextInChain : * const WGPUChainedStruct , } # [test] fn bindgen_test_layout_WGPUInstanceDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUInstanceDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUInstanceDescriptor > () , 8usize , concat ! ("Size of: " , stringify ! (WGPUInstanceDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUInstanceDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUInstanceDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUInstanceDescriptor) , "::" , stringify ! (nextInChain))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPULimits { pub maxTextureDimension1D : u32 , pub maxTextureDimension2D : u32 , pub maxTextureDimension3D : u32 , pub maxTextureArrayLayers : u32 , pub maxBindGroups : u32 , pub maxBindGroupsPlusVertexBuffers : u32 , pub maxBindingsPerBindGroup : u32 , pub maxDynamicUniformBuffersPerPipelineLayout : u32 , pub maxDynamicStorageBuffersPerPipelineLayout : u32 , pub maxSampledTexturesPerShaderStage : u32 , pub maxSamplersPerShaderStage : u32 , pub maxStorageBuffersPerShaderStage : u32 , pub maxStorageTexturesPerShaderStage : u32 , pub maxUniformBuffersPerShaderStage : u32 , pub maxUniformBufferBindingSize : u64 , pub maxStorageBufferBindingSize : u64 , pub minUniformBufferOffsetAlignment : u32 , pub minStorageBufferOffsetAlignment : u32 , pub maxVertexBuffers : u32 , pub maxBufferSize : u64 , pub maxVertexAttributes : u32 , pub maxVertexBufferArrayStride : u32 , pub maxInterStageShaderComponents : u32 , pub maxInterStageShaderVariables : u32 , pub maxColorAttachments : u32 , pub maxColorAttachmentBytesPerSample : u32 , pub maxComputeWorkgroupStorageSize : u32 , pub maxComputeInvocationsPerWorkgroup : u32 , pub maxComputeWorkgroupSizeX : u32 , pub maxComputeWorkgroupSizeY : u32 , pub maxComputeWorkgroupSizeZ : u32 , pub maxComputeWorkgroupsPerDimension : u32 , } # [test] fn bindgen_test_layout_WGPULimits () { const UNINIT : :: std :: mem :: MaybeUninit < WGPULimits > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPULimits > () , 144usize , concat ! ("Size of: " , stringify ! (WGPULimits))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPULimits > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPULimits))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxTextureDimension1D) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxTextureDimension1D))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxTextureDimension2D) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxTextureDimension2D))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxTextureDimension3D) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxTextureDimension3D))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxTextureArrayLayers) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxTextureArrayLayers))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxBindGroups) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxBindGroups))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxBindGroupsPlusVertexBuffers) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxBindGroupsPlusVertexBuffers))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxBindingsPerBindGroup) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxBindingsPerBindGroup))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxDynamicUniformBuffersPerPipelineLayout) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxDynamicUniformBuffersPerPipelineLayout))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxDynamicStorageBuffersPerPipelineLayout) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxDynamicStorageBuffersPerPipelineLayout))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxSampledTexturesPerShaderStage) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxSampledTexturesPerShaderStage))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxSamplersPerShaderStage) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxSamplersPerShaderStage))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxStorageBuffersPerShaderStage) as usize - ptr as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxStorageBuffersPerShaderStage))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxStorageTexturesPerShaderStage) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxStorageTexturesPerShaderStage))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxUniformBuffersPerShaderStage) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxUniformBuffersPerShaderStage))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxUniformBufferBindingSize) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxUniformBufferBindingSize))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxStorageBufferBindingSize) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxStorageBufferBindingSize))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . minUniformBufferOffsetAlignment) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (minUniformBufferOffsetAlignment))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . minStorageBufferOffsetAlignment) as usize - ptr as usize } , 76usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (minStorageBufferOffsetAlignment))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxVertexBuffers) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxVertexBuffers))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxBufferSize) as usize - ptr as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxBufferSize))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxVertexAttributes) as usize - ptr as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxVertexAttributes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxVertexBufferArrayStride) as usize - ptr as usize } , 100usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxVertexBufferArrayStride))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxInterStageShaderComponents) as usize - ptr as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxInterStageShaderComponents))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxInterStageShaderVariables) as usize - ptr as usize } , 108usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxInterStageShaderVariables))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxColorAttachments) as usize - ptr as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxColorAttachments))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxColorAttachmentBytesPerSample) as usize - ptr as usize } , 116usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxColorAttachmentBytesPerSample))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxComputeWorkgroupStorageSize) as usize - ptr as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxComputeWorkgroupStorageSize))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxComputeInvocationsPerWorkgroup) as usize - ptr as usize } , 124usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxComputeInvocationsPerWorkgroup))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxComputeWorkgroupSizeX) as usize - ptr as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxComputeWorkgroupSizeX))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxComputeWorkgroupSizeY) as usize - ptr as usize } , 132usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxComputeWorkgroupSizeY))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxComputeWorkgroupSizeZ) as usize - ptr as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxComputeWorkgroupSizeZ))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxComputeWorkgroupsPerDimension) as usize - ptr as usize } , 140usize , concat ! ("Offset of field: " , stringify ! (WGPULimits) , "::" , stringify ! (maxComputeWorkgroupsPerDimension))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUMultisampleState { pub nextInChain : * const WGPUChainedStruct , pub count : u32 , pub mask : u32 , pub alphaToCoverageEnabled : WGPUBool , } # [test] fn bindgen_test_layout_WGPUMultisampleState () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUMultisampleState > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUMultisampleState > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUMultisampleState))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUMultisampleState > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUMultisampleState))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUMultisampleState) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . count) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUMultisampleState) , "::" , stringify ! (count))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . mask) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (WGPUMultisampleState) , "::" , stringify ! (mask))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . alphaToCoverageEnabled) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUMultisampleState) , "::" , stringify ! (alphaToCoverageEnabled))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUOrigin3D { pub x : u32 , pub y : u32 , pub z : u32 , } # [test] fn bindgen_test_layout_WGPUOrigin3D () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUOrigin3D > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUOrigin3D > () , 12usize , concat ! ("Size of: " , stringify ! (WGPUOrigin3D))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUOrigin3D > () , 4usize , concat ! ("Alignment of " , stringify ! (WGPUOrigin3D))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . x) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUOrigin3D) , "::" , stringify ! (x))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . y) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (WGPUOrigin3D) , "::" , stringify ! (y))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . z) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUOrigin3D) , "::" , stringify ! (z))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUPipelineLayoutDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , pub bindGroupLayoutCount : usize , pub bindGroupLayouts : * const WGPUBindGroupLayout , } # [test] fn bindgen_test_layout_WGPUPipelineLayoutDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUPipelineLayoutDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUPipelineLayoutDescriptor > () , 32usize , concat ! ("Size of: " , stringify ! (WGPUPipelineLayoutDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUPipelineLayoutDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUPipelineLayoutDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUPipelineLayoutDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUPipelineLayoutDescriptor) , "::" , stringify ! (label))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bindGroupLayoutCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUPipelineLayoutDescriptor) , "::" , stringify ! (bindGroupLayoutCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bindGroupLayouts) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUPipelineLayoutDescriptor) , "::" , stringify ! (bindGroupLayouts))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUPrimitiveDepthClipControl { pub chain : WGPUChainedStruct , pub unclippedDepth : WGPUBool , } # [test] fn bindgen_test_layout_WGPUPrimitiveDepthClipControl () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUPrimitiveDepthClipControl > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUPrimitiveDepthClipControl > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUPrimitiveDepthClipControl))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUPrimitiveDepthClipControl > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUPrimitiveDepthClipControl))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUPrimitiveDepthClipControl) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . unclippedDepth) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUPrimitiveDepthClipControl) , "::" , stringify ! (unclippedDepth))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUPrimitiveState { pub nextInChain : * const WGPUChainedStruct , pub topology : WGPUPrimitiveTopology , pub stripIndexFormat : WGPUIndexFormat , pub frontFace : WGPUFrontFace , pub cullMode : WGPUCullMode , } # [test] fn bindgen_test_layout_WGPUPrimitiveState () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUPrimitiveState > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUPrimitiveState > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUPrimitiveState))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUPrimitiveState > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUPrimitiveState))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUPrimitiveState) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . topology) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUPrimitiveState) , "::" , stringify ! (topology))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . stripIndexFormat) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (WGPUPrimitiveState) , "::" , stringify ! (stripIndexFormat))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . frontFace) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUPrimitiveState) , "::" , stringify ! (frontFace))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . cullMode) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (WGPUPrimitiveState) , "::" , stringify ! (cullMode))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUQuerySetDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , pub type_ : WGPUQueryType , pub count : u32 , } # [test] fn bindgen_test_layout_WGPUQuerySetDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUQuerySetDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUQuerySetDescriptor > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUQuerySetDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUQuerySetDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUQuerySetDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUQuerySetDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUQuerySetDescriptor) , "::" , stringify ! (label))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . type_) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUQuerySetDescriptor) , "::" , stringify ! (type_))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . count) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (WGPUQuerySetDescriptor) , "::" , stringify ! (count))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUQueueDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_WGPUQueueDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUQueueDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUQueueDescriptor > () , 16usize , concat ! ("Size of: " , stringify ! (WGPUQueueDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUQueueDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUQueueDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUQueueDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUQueueDescriptor) , "::" , stringify ! (label))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPURenderBundleDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_WGPURenderBundleDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPURenderBundleDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPURenderBundleDescriptor > () , 16usize , concat ! ("Size of: " , stringify ! (WGPURenderBundleDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPURenderBundleDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPURenderBundleDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPURenderBundleDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPURenderBundleDescriptor) , "::" , stringify ! (label))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPURenderBundleEncoderDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , pub colorFormatCount : usize , pub colorFormats : * const WGPUTextureFormat , pub depthStencilFormat : WGPUTextureFormat , pub sampleCount : u32 , pub depthReadOnly : WGPUBool , pub stencilReadOnly : WGPUBool , } # [test] fn bindgen_test_layout_WGPURenderBundleEncoderDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPURenderBundleEncoderDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPURenderBundleEncoderDescriptor > () , 48usize , concat ! ("Size of: " , stringify ! (WGPURenderBundleEncoderDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPURenderBundleEncoderDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPURenderBundleEncoderDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPURenderBundleEncoderDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPURenderBundleEncoderDescriptor) , "::" , stringify ! (label))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . colorFormatCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPURenderBundleEncoderDescriptor) , "::" , stringify ! (colorFormatCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . colorFormats) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPURenderBundleEncoderDescriptor) , "::" , stringify ! (colorFormats))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . depthStencilFormat) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPURenderBundleEncoderDescriptor) , "::" , stringify ! (depthStencilFormat))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . sampleCount) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (WGPURenderBundleEncoderDescriptor) , "::" , stringify ! (sampleCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . depthReadOnly) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPURenderBundleEncoderDescriptor) , "::" , stringify ! (depthReadOnly))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . stencilReadOnly) as usize - ptr as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (WGPURenderBundleEncoderDescriptor) , "::" , stringify ! (stencilReadOnly))) ; } # [repr (C)] pub struct WGPURenderPassDepthStencilAttachment { pub view : WGPUTextureView , pub depthLoadOp : WGPULoadOp , pub depthStoreOp : WGPUStoreOp , pub depthClearValue : f32 , pub depthReadOnly : WGPUBool , pub stencilLoadOp : WGPULoadOp , pub stencilStoreOp : WGPUStoreOp , pub stencilClearValue : u32 , pub stencilReadOnly : WGPUBool , } # [test] fn bindgen_test_layout_WGPURenderPassDepthStencilAttachment () { const UNINIT : :: std :: mem :: MaybeUninit < WGPURenderPassDepthStencilAttachment > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPURenderPassDepthStencilAttachment > () , 40usize , concat ! ("Size of: " , stringify ! (WGPURenderPassDepthStencilAttachment))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPURenderPassDepthStencilAttachment > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPURenderPassDepthStencilAttachment))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . view) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDepthStencilAttachment) , "::" , stringify ! (view))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . depthLoadOp) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDepthStencilAttachment) , "::" , stringify ! (depthLoadOp))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . depthStoreOp) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDepthStencilAttachment) , "::" , stringify ! (depthStoreOp))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . depthClearValue) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDepthStencilAttachment) , "::" , stringify ! (depthClearValue))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . depthReadOnly) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDepthStencilAttachment) , "::" , stringify ! (depthReadOnly))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . stencilLoadOp) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDepthStencilAttachment) , "::" , stringify ! (stencilLoadOp))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . stencilStoreOp) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDepthStencilAttachment) , "::" , stringify ! (stencilStoreOp))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . stencilClearValue) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDepthStencilAttachment) , "::" , stringify ! (stencilClearValue))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . stencilReadOnly) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDepthStencilAttachment) , "::" , stringify ! (stencilReadOnly))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPURenderPassDescriptorMaxDrawCount { pub chain : WGPUChainedStruct , pub maxDrawCount : u64 , } # [test] fn bindgen_test_layout_WGPURenderPassDescriptorMaxDrawCount () { const UNINIT : :: std :: mem :: MaybeUninit < WGPURenderPassDescriptorMaxDrawCount > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPURenderPassDescriptorMaxDrawCount > () , 24usize , concat ! ("Size of: " , stringify ! (WGPURenderPassDescriptorMaxDrawCount))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPURenderPassDescriptorMaxDrawCount > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPURenderPassDescriptorMaxDrawCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDescriptorMaxDrawCount) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxDrawCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDescriptorMaxDrawCount) , "::" , stringify ! (maxDrawCount))) ; } # [repr (C)] pub struct WGPURenderPassTimestampWrites { pub querySet : WGPUQuerySet , pub beginningOfPassWriteIndex : u32 , pub endOfPassWriteIndex : u32 , } # [test] fn bindgen_test_layout_WGPURenderPassTimestampWrites () { const UNINIT : :: std :: mem :: MaybeUninit < WGPURenderPassTimestampWrites > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPURenderPassTimestampWrites > () , 16usize , concat ! ("Size of: " , stringify ! (WGPURenderPassTimestampWrites))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPURenderPassTimestampWrites > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPURenderPassTimestampWrites))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . querySet) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassTimestampWrites) , "::" , stringify ! (querySet))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . beginningOfPassWriteIndex) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassTimestampWrites) , "::" , stringify ! (beginningOfPassWriteIndex))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . endOfPassWriteIndex) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassTimestampWrites) , "::" , stringify ! (endOfPassWriteIndex))) ; } # [repr (C)] pub struct WGPURequestAdapterOptions { pub nextInChain : * const WGPUChainedStruct , pub compatibleSurface : WGPUSurface , pub powerPreference : WGPUPowerPreference , pub backendType : WGPUBackendType , pub forceFallbackAdapter : WGPUBool , } # [test] fn bindgen_test_layout_WGPURequestAdapterOptions () { const UNINIT : :: std :: mem :: MaybeUninit < WGPURequestAdapterOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPURequestAdapterOptions > () , 32usize , concat ! ("Size of: " , stringify ! (WGPURequestAdapterOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPURequestAdapterOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPURequestAdapterOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPURequestAdapterOptions) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . compatibleSurface) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPURequestAdapterOptions) , "::" , stringify ! (compatibleSurface))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . powerPreference) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPURequestAdapterOptions) , "::" , stringify ! (powerPreference))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . backendType) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (WGPURequestAdapterOptions) , "::" , stringify ! (backendType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . forceFallbackAdapter) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPURequestAdapterOptions) , "::" , stringify ! (forceFallbackAdapter))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUSamplerBindingLayout { pub nextInChain : * const WGPUChainedStruct , pub type_ : WGPUSamplerBindingType , } # [test] fn bindgen_test_layout_WGPUSamplerBindingLayout () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUSamplerBindingLayout > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUSamplerBindingLayout > () , 16usize , concat ! ("Size of: " , stringify ! (WGPUSamplerBindingLayout))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUSamplerBindingLayout > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUSamplerBindingLayout))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUSamplerBindingLayout) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . type_) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUSamplerBindingLayout) , "::" , stringify ! (type_))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUSamplerDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , pub addressModeU : WGPUAddressMode , pub addressModeV : WGPUAddressMode , pub addressModeW : WGPUAddressMode , pub magFilter : WGPUFilterMode , pub minFilter : WGPUFilterMode , pub mipmapFilter : WGPUMipmapFilterMode , pub lodMinClamp : f32 , pub lodMaxClamp : f32 , pub compare : WGPUCompareFunction , pub maxAnisotropy : u16 , } # [test] fn bindgen_test_layout_WGPUSamplerDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUSamplerDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUSamplerDescriptor > () , 56usize , concat ! ("Size of: " , stringify ! (WGPUSamplerDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUSamplerDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUSamplerDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUSamplerDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUSamplerDescriptor) , "::" , stringify ! (label))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . addressModeU) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUSamplerDescriptor) , "::" , stringify ! (addressModeU))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . addressModeV) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (WGPUSamplerDescriptor) , "::" , stringify ! (addressModeV))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . addressModeW) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUSamplerDescriptor) , "::" , stringify ! (addressModeW))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . magFilter) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (WGPUSamplerDescriptor) , "::" , stringify ! (magFilter))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . minFilter) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUSamplerDescriptor) , "::" , stringify ! (minFilter))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . mipmapFilter) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (WGPUSamplerDescriptor) , "::" , stringify ! (mipmapFilter))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . lodMinClamp) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUSamplerDescriptor) , "::" , stringify ! (lodMinClamp))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . lodMaxClamp) as usize - ptr as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (WGPUSamplerDescriptor) , "::" , stringify ! (lodMaxClamp))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . compare) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (WGPUSamplerDescriptor) , "::" , stringify ! (compare))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxAnisotropy) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (WGPUSamplerDescriptor) , "::" , stringify ! (maxAnisotropy))) ; } # [repr (C)] pub struct WGPUShaderModuleCompilationHint { pub nextInChain : * const WGPUChainedStruct , pub entryPoint : * const :: std :: os :: raw :: c_char , pub layout : WGPUPipelineLayout , } # [test] fn bindgen_test_layout_WGPUShaderModuleCompilationHint () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUShaderModuleCompilationHint > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUShaderModuleCompilationHint > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUShaderModuleCompilationHint))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUShaderModuleCompilationHint > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUShaderModuleCompilationHint))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleCompilationHint) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . entryPoint) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleCompilationHint) , "::" , stringify ! (entryPoint))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . layout) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleCompilationHint) , "::" , stringify ! (layout))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUShaderModuleSPIRVDescriptor { pub chain : WGPUChainedStruct , pub codeSize : u32 , pub code : * const u32 , } # [test] fn bindgen_test_layout_WGPUShaderModuleSPIRVDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUShaderModuleSPIRVDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUShaderModuleSPIRVDescriptor > () , 32usize , concat ! ("Size of: " , stringify ! (WGPUShaderModuleSPIRVDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUShaderModuleSPIRVDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUShaderModuleSPIRVDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleSPIRVDescriptor) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . codeSize) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleSPIRVDescriptor) , "::" , stringify ! (codeSize))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . code) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleSPIRVDescriptor) , "::" , stringify ! (code))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUShaderModuleWGSLDescriptor { pub chain : WGPUChainedStruct , pub code : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_WGPUShaderModuleWGSLDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUShaderModuleWGSLDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUShaderModuleWGSLDescriptor > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUShaderModuleWGSLDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUShaderModuleWGSLDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUShaderModuleWGSLDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleWGSLDescriptor) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . code) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleWGSLDescriptor) , "::" , stringify ! (code))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUStencilFaceState { pub compare : WGPUCompareFunction , pub failOp : WGPUStencilOperation , pub depthFailOp : WGPUStencilOperation , pub passOp : WGPUStencilOperation , } # [test] fn bindgen_test_layout_WGPUStencilFaceState () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUStencilFaceState > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUStencilFaceState > () , 16usize , concat ! ("Size of: " , stringify ! (WGPUStencilFaceState))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUStencilFaceState > () , 4usize , concat ! ("Alignment of " , stringify ! (WGPUStencilFaceState))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . compare) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUStencilFaceState) , "::" , stringify ! (compare))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . failOp) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (WGPUStencilFaceState) , "::" , stringify ! (failOp))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . depthFailOp) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUStencilFaceState) , "::" , stringify ! (depthFailOp))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . passOp) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (WGPUStencilFaceState) , "::" , stringify ! (passOp))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUStorageTextureBindingLayout { pub nextInChain : * const WGPUChainedStruct , pub access : WGPUStorageTextureAccess , pub format : WGPUTextureFormat , pub viewDimension : WGPUTextureViewDimension , } # [test] fn bindgen_test_layout_WGPUStorageTextureBindingLayout () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUStorageTextureBindingLayout > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUStorageTextureBindingLayout > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUStorageTextureBindingLayout))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUStorageTextureBindingLayout > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUStorageTextureBindingLayout))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUStorageTextureBindingLayout) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . access) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUStorageTextureBindingLayout) , "::" , stringify ! (access))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . format) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (WGPUStorageTextureBindingLayout) , "::" , stringify ! (format))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . viewDimension) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUStorageTextureBindingLayout) , "::" , stringify ! (viewDimension))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUSurfaceCapabilities { pub nextInChain : * mut WGPUChainedStructOut , pub formatCount : usize , pub formats : * const WGPUTextureFormat , pub presentModeCount : usize , pub presentModes : * const WGPUPresentMode , pub alphaModeCount : usize , pub alphaModes : * const WGPUCompositeAlphaMode , } # [test] fn bindgen_test_layout_WGPUSurfaceCapabilities () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUSurfaceCapabilities > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUSurfaceCapabilities > () , 56usize , concat ! ("Size of: " , stringify ! (WGPUSurfaceCapabilities))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUSurfaceCapabilities > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUSurfaceCapabilities))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceCapabilities) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . formatCount) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceCapabilities) , "::" , stringify ! (formatCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . formats) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceCapabilities) , "::" , stringify ! (formats))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . presentModeCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceCapabilities) , "::" , stringify ! (presentModeCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . presentModes) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceCapabilities) , "::" , stringify ! (presentModes))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . alphaModeCount) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceCapabilities) , "::" , stringify ! (alphaModeCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . alphaModes) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceCapabilities) , "::" , stringify ! (alphaModes))) ; } # [repr (C)] pub struct WGPUSurfaceConfiguration { pub nextInChain : * const WGPUChainedStruct , pub device : WGPUDevice , pub format : WGPUTextureFormat , pub usage : WGPUTextureUsageFlags , pub viewFormatCount : usize , pub viewFormats : * const WGPUTextureFormat , pub alphaMode : WGPUCompositeAlphaMode , pub width : u32 , pub height : u32 , pub presentMode : WGPUPresentMode , } # [test] fn bindgen_test_layout_WGPUSurfaceConfiguration () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUSurfaceConfiguration > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUSurfaceConfiguration > () , 56usize , concat ! ("Size of: " , stringify ! (WGPUSurfaceConfiguration))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUSurfaceConfiguration > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUSurfaceConfiguration))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceConfiguration) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . device) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceConfiguration) , "::" , stringify ! (device))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . format) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceConfiguration) , "::" , stringify ! (format))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . usage) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceConfiguration) , "::" , stringify ! (usage))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . viewFormatCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceConfiguration) , "::" , stringify ! (viewFormatCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . viewFormats) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceConfiguration) , "::" , stringify ! (viewFormats))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . alphaMode) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceConfiguration) , "::" , stringify ! (alphaMode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . width) as usize - ptr as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceConfiguration) , "::" , stringify ! (width))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . height) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceConfiguration) , "::" , stringify ! (height))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . presentMode) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceConfiguration) , "::" , stringify ! (presentMode))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUSurfaceDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_WGPUSurfaceDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUSurfaceDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUSurfaceDescriptor > () , 16usize , concat ! ("Size of: " , stringify ! (WGPUSurfaceDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUSurfaceDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUSurfaceDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptor) , "::" , stringify ! (label))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUSurfaceDescriptorFromAndroidNativeWindow { pub chain : WGPUChainedStruct , pub window : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout_WGPUSurfaceDescriptorFromAndroidNativeWindow () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUSurfaceDescriptorFromAndroidNativeWindow > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUSurfaceDescriptorFromAndroidNativeWindow > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUSurfaceDescriptorFromAndroidNativeWindow))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUSurfaceDescriptorFromAndroidNativeWindow > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUSurfaceDescriptorFromAndroidNativeWindow))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromAndroidNativeWindow) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . window) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromAndroidNativeWindow) , "::" , stringify ! (window))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUSurfaceDescriptorFromCanvasHTMLSelector { pub chain : WGPUChainedStruct , pub selector : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_WGPUSurfaceDescriptorFromCanvasHTMLSelector () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUSurfaceDescriptorFromCanvasHTMLSelector > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUSurfaceDescriptorFromCanvasHTMLSelector > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUSurfaceDescriptorFromCanvasHTMLSelector))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUSurfaceDescriptorFromCanvasHTMLSelector > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUSurfaceDescriptorFromCanvasHTMLSelector))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromCanvasHTMLSelector) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . selector) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromCanvasHTMLSelector) , "::" , stringify ! (selector))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUSurfaceDescriptorFromMetalLayer { pub chain : WGPUChainedStruct , pub layer : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout_WGPUSurfaceDescriptorFromMetalLayer () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUSurfaceDescriptorFromMetalLayer > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUSurfaceDescriptorFromMetalLayer > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUSurfaceDescriptorFromMetalLayer))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUSurfaceDescriptorFromMetalLayer > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUSurfaceDescriptorFromMetalLayer))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromMetalLayer) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . layer) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromMetalLayer) , "::" , stringify ! (layer))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUSurfaceDescriptorFromWaylandSurface { pub chain : WGPUChainedStruct , pub display : * mut :: std :: os :: raw :: c_void , pub surface : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout_WGPUSurfaceDescriptorFromWaylandSurface () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUSurfaceDescriptorFromWaylandSurface > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUSurfaceDescriptorFromWaylandSurface > () , 32usize , concat ! ("Size of: " , stringify ! (WGPUSurfaceDescriptorFromWaylandSurface))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUSurfaceDescriptorFromWaylandSurface > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUSurfaceDescriptorFromWaylandSurface))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromWaylandSurface) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . display) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromWaylandSurface) , "::" , stringify ! (display))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . surface) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromWaylandSurface) , "::" , stringify ! (surface))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUSurfaceDescriptorFromWindowsHWND { pub chain : WGPUChainedStruct , pub hinstance : * mut :: std :: os :: raw :: c_void , pub hwnd : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout_WGPUSurfaceDescriptorFromWindowsHWND () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUSurfaceDescriptorFromWindowsHWND > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUSurfaceDescriptorFromWindowsHWND > () , 32usize , concat ! ("Size of: " , stringify ! (WGPUSurfaceDescriptorFromWindowsHWND))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUSurfaceDescriptorFromWindowsHWND > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUSurfaceDescriptorFromWindowsHWND))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromWindowsHWND) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . hinstance) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromWindowsHWND) , "::" , stringify ! (hinstance))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . hwnd) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromWindowsHWND) , "::" , stringify ! (hwnd))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUSurfaceDescriptorFromXcbWindow { pub chain : WGPUChainedStruct , pub connection : * mut :: std :: os :: raw :: c_void , pub window : u32 , } # [test] fn bindgen_test_layout_WGPUSurfaceDescriptorFromXcbWindow () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUSurfaceDescriptorFromXcbWindow > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUSurfaceDescriptorFromXcbWindow > () , 32usize , concat ! ("Size of: " , stringify ! (WGPUSurfaceDescriptorFromXcbWindow))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUSurfaceDescriptorFromXcbWindow > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUSurfaceDescriptorFromXcbWindow))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromXcbWindow) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . connection) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromXcbWindow) , "::" , stringify ! (connection))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . window) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromXcbWindow) , "::" , stringify ! (window))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUSurfaceDescriptorFromXlibWindow { pub chain : WGPUChainedStruct , pub display : * mut :: std :: os :: raw :: c_void , pub window : u64 , } # [test] fn bindgen_test_layout_WGPUSurfaceDescriptorFromXlibWindow () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUSurfaceDescriptorFromXlibWindow > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUSurfaceDescriptorFromXlibWindow > () , 32usize , concat ! ("Size of: " , stringify ! (WGPUSurfaceDescriptorFromXlibWindow))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUSurfaceDescriptorFromXlibWindow > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUSurfaceDescriptorFromXlibWindow))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromXlibWindow) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . display) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromXlibWindow) , "::" , stringify ! (display))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . window) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceDescriptorFromXlibWindow) , "::" , stringify ! (window))) ; } # [repr (C)] pub struct WGPUSurfaceTexture { pub texture : WGPUTexture , pub suboptimal : WGPUBool , pub status : WGPUSurfaceGetCurrentTextureStatus , } # [test] fn bindgen_test_layout_WGPUSurfaceTexture () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUSurfaceTexture > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUSurfaceTexture > () , 16usize , concat ! ("Size of: " , stringify ! (WGPUSurfaceTexture))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUSurfaceTexture > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUSurfaceTexture))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . texture) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceTexture) , "::" , stringify ! (texture))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . suboptimal) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceTexture) , "::" , stringify ! (suboptimal))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . status) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceTexture) , "::" , stringify ! (status))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUTextureBindingLayout { pub nextInChain : * const WGPUChainedStruct , pub sampleType : WGPUTextureSampleType , pub viewDimension : WGPUTextureViewDimension , pub multisampled : WGPUBool , } # [test] fn bindgen_test_layout_WGPUTextureBindingLayout () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUTextureBindingLayout > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUTextureBindingLayout > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUTextureBindingLayout))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUTextureBindingLayout > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUTextureBindingLayout))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureBindingLayout) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . sampleType) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureBindingLayout) , "::" , stringify ! (sampleType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . viewDimension) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureBindingLayout) , "::" , stringify ! (viewDimension))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . multisampled) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureBindingLayout) , "::" , stringify ! (multisampled))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUTextureDataLayout { pub nextInChain : * const WGPUChainedStruct , pub offset : u64 , pub bytesPerRow : u32 , pub rowsPerImage : u32 , } # [test] fn bindgen_test_layout_WGPUTextureDataLayout () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUTextureDataLayout > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUTextureDataLayout > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUTextureDataLayout))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUTextureDataLayout > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUTextureDataLayout))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureDataLayout) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . offset) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureDataLayout) , "::" , stringify ! (offset))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bytesPerRow) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureDataLayout) , "::" , stringify ! (bytesPerRow))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . rowsPerImage) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureDataLayout) , "::" , stringify ! (rowsPerImage))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUTextureViewDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , pub format : WGPUTextureFormat , pub dimension : WGPUTextureViewDimension , pub baseMipLevel : u32 , pub mipLevelCount : u32 , pub baseArrayLayer : u32 , pub arrayLayerCount : u32 , pub aspect : WGPUTextureAspect , } # [test] fn bindgen_test_layout_WGPUTextureViewDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUTextureViewDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUTextureViewDescriptor > () , 48usize , concat ! ("Size of: " , stringify ! (WGPUTextureViewDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUTextureViewDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUTextureViewDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureViewDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureViewDescriptor) , "::" , stringify ! (label))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . format) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureViewDescriptor) , "::" , stringify ! (format))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . dimension) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureViewDescriptor) , "::" , stringify ! (dimension))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . baseMipLevel) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureViewDescriptor) , "::" , stringify ! (baseMipLevel))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . mipLevelCount) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureViewDescriptor) , "::" , stringify ! (mipLevelCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . baseArrayLayer) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureViewDescriptor) , "::" , stringify ! (baseArrayLayer))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . arrayLayerCount) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureViewDescriptor) , "::" , stringify ! (arrayLayerCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . aspect) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureViewDescriptor) , "::" , stringify ! (aspect))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUVertexAttribute { pub format : WGPUVertexFormat , pub offset : u64 , pub shaderLocation : u32 , } # [test] fn bindgen_test_layout_WGPUVertexAttribute () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUVertexAttribute > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUVertexAttribute > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUVertexAttribute))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUVertexAttribute > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUVertexAttribute))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . format) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUVertexAttribute) , "::" , stringify ! (format))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . offset) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUVertexAttribute) , "::" , stringify ! (offset))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . shaderLocation) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUVertexAttribute) , "::" , stringify ! (shaderLocation))) ; } # [repr (C)] pub struct WGPUBindGroupDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , pub layout : WGPUBindGroupLayout , pub entryCount : usize , pub entries : * const WGPUBindGroupEntry , } # [test] fn bindgen_test_layout_WGPUBindGroupDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUBindGroupDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUBindGroupDescriptor > () , 40usize , concat ! ("Size of: " , stringify ! (WGPUBindGroupDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUBindGroupDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUBindGroupDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupDescriptor) , "::" , stringify ! (label))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . layout) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupDescriptor) , "::" , stringify ! (layout))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . entryCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupDescriptor) , "::" , stringify ! (entryCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . entries) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupDescriptor) , "::" , stringify ! (entries))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUBindGroupLayoutEntry { pub nextInChain : * const WGPUChainedStruct , pub binding : u32 , pub visibility : WGPUShaderStageFlags , pub buffer : WGPUBufferBindingLayout , pub sampler : WGPUSamplerBindingLayout , pub texture : WGPUTextureBindingLayout , pub storageTexture : WGPUStorageTextureBindingLayout , } # [test] fn bindgen_test_layout_WGPUBindGroupLayoutEntry () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUBindGroupLayoutEntry > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUBindGroupLayoutEntry > () , 104usize , concat ! ("Size of: " , stringify ! (WGPUBindGroupLayoutEntry))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUBindGroupLayoutEntry > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUBindGroupLayoutEntry))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupLayoutEntry) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . binding) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupLayoutEntry) , "::" , stringify ! (binding))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . visibility) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupLayoutEntry) , "::" , stringify ! (visibility))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . buffer) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupLayoutEntry) , "::" , stringify ! (buffer))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . sampler) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupLayoutEntry) , "::" , stringify ! (sampler))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . texture) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupLayoutEntry) , "::" , stringify ! (texture))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . storageTexture) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupLayoutEntry) , "::" , stringify ! (storageTexture))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUBlendState { pub color : WGPUBlendComponent , pub alpha : WGPUBlendComponent , } # [test] fn bindgen_test_layout_WGPUBlendState () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUBlendState > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUBlendState > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUBlendState))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUBlendState > () , 4usize , concat ! ("Alignment of " , stringify ! (WGPUBlendState))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . color) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUBlendState) , "::" , stringify ! (color))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . alpha) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (WGPUBlendState) , "::" , stringify ! (alpha))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUCompilationInfo { pub nextInChain : * const WGPUChainedStruct , pub messageCount : usize , pub messages : * const WGPUCompilationMessage , } # [test] fn bindgen_test_layout_WGPUCompilationInfo () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUCompilationInfo > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUCompilationInfo > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUCompilationInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUCompilationInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUCompilationInfo))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUCompilationInfo) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . messageCount) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUCompilationInfo) , "::" , stringify ! (messageCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . messages) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUCompilationInfo) , "::" , stringify ! (messages))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUComputePassDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , pub timestampWrites : * const WGPUComputePassTimestampWrites , } # [test] fn bindgen_test_layout_WGPUComputePassDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUComputePassDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUComputePassDescriptor > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUComputePassDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUComputePassDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUComputePassDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUComputePassDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUComputePassDescriptor) , "::" , stringify ! (label))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . timestampWrites) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUComputePassDescriptor) , "::" , stringify ! (timestampWrites))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUDepthStencilState { pub nextInChain : * const WGPUChainedStruct , pub format : WGPUTextureFormat , pub depthWriteEnabled : WGPUBool , pub depthCompare : WGPUCompareFunction , pub stencilFront : WGPUStencilFaceState , pub stencilBack : WGPUStencilFaceState , pub stencilReadMask : u32 , pub stencilWriteMask : u32 , pub depthBias : i32 , pub depthBiasSlopeScale : f32 , pub depthBiasClamp : f32 , } # [test] fn bindgen_test_layout_WGPUDepthStencilState () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUDepthStencilState > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUDepthStencilState > () , 72usize , concat ! ("Size of: " , stringify ! (WGPUDepthStencilState))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUDepthStencilState > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUDepthStencilState))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUDepthStencilState) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . format) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUDepthStencilState) , "::" , stringify ! (format))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . depthWriteEnabled) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (WGPUDepthStencilState) , "::" , stringify ! (depthWriteEnabled))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . depthCompare) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUDepthStencilState) , "::" , stringify ! (depthCompare))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . stencilFront) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (WGPUDepthStencilState) , "::" , stringify ! (stencilFront))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . stencilBack) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (WGPUDepthStencilState) , "::" , stringify ! (stencilBack))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . stencilReadMask) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (WGPUDepthStencilState) , "::" , stringify ! (stencilReadMask))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . stencilWriteMask) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (WGPUDepthStencilState) , "::" , stringify ! (stencilWriteMask))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . depthBias) as usize - ptr as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (WGPUDepthStencilState) , "::" , stringify ! (depthBias))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . depthBiasSlopeScale) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (WGPUDepthStencilState) , "::" , stringify ! (depthBiasSlopeScale))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . depthBiasClamp) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (WGPUDepthStencilState) , "::" , stringify ! (depthBiasClamp))) ; } # [repr (C)] pub struct WGPUImageCopyBuffer { pub nextInChain : * const WGPUChainedStruct , pub layout : WGPUTextureDataLayout , pub buffer : WGPUBuffer , } # [test] fn bindgen_test_layout_WGPUImageCopyBuffer () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUImageCopyBuffer > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUImageCopyBuffer > () , 40usize , concat ! ("Size of: " , stringify ! (WGPUImageCopyBuffer))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUImageCopyBuffer > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUImageCopyBuffer))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUImageCopyBuffer) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . layout) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUImageCopyBuffer) , "::" , stringify ! (layout))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . buffer) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUImageCopyBuffer) , "::" , stringify ! (buffer))) ; } # [repr (C)] pub struct WGPUImageCopyTexture { pub nextInChain : * const WGPUChainedStruct , pub texture : WGPUTexture , pub mipLevel : u32 , pub origin : WGPUOrigin3D , pub aspect : WGPUTextureAspect , } # [test] fn bindgen_test_layout_WGPUImageCopyTexture () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUImageCopyTexture > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUImageCopyTexture > () , 40usize , concat ! ("Size of: " , stringify ! (WGPUImageCopyTexture))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUImageCopyTexture > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUImageCopyTexture))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUImageCopyTexture) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . texture) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUImageCopyTexture) , "::" , stringify ! (texture))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . mipLevel) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUImageCopyTexture) , "::" , stringify ! (mipLevel))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . origin) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (WGPUImageCopyTexture) , "::" , stringify ! (origin))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . aspect) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUImageCopyTexture) , "::" , stringify ! (aspect))) ; } # [repr (C)] pub struct WGPUProgrammableStageDescriptor { pub nextInChain : * const WGPUChainedStruct , pub module : WGPUShaderModule , pub entryPoint : * const :: std :: os :: raw :: c_char , pub constantCount : usize , pub constants : * const WGPUConstantEntry , } # [test] fn bindgen_test_layout_WGPUProgrammableStageDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUProgrammableStageDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUProgrammableStageDescriptor > () , 40usize , concat ! ("Size of: " , stringify ! (WGPUProgrammableStageDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUProgrammableStageDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUProgrammableStageDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUProgrammableStageDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . module) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUProgrammableStageDescriptor) , "::" , stringify ! (module))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . entryPoint) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUProgrammableStageDescriptor) , "::" , stringify ! (entryPoint))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . constantCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUProgrammableStageDescriptor) , "::" , stringify ! (constantCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . constants) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUProgrammableStageDescriptor) , "::" , stringify ! (constants))) ; } # [repr (C)] pub struct WGPURenderPassColorAttachment { pub nextInChain : * const WGPUChainedStruct , pub view : WGPUTextureView , pub depthSlice : u32 , pub resolveTarget : WGPUTextureView , pub loadOp : WGPULoadOp , pub storeOp : WGPUStoreOp , pub clearValue : WGPUColor , } # [test] fn bindgen_test_layout_WGPURenderPassColorAttachment () { const UNINIT : :: std :: mem :: MaybeUninit < WGPURenderPassColorAttachment > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPURenderPassColorAttachment > () , 72usize , concat ! ("Size of: " , stringify ! (WGPURenderPassColorAttachment))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPURenderPassColorAttachment > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPURenderPassColorAttachment))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassColorAttachment) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . view) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassColorAttachment) , "::" , stringify ! (view))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . depthSlice) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassColorAttachment) , "::" , stringify ! (depthSlice))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . resolveTarget) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassColorAttachment) , "::" , stringify ! (resolveTarget))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . loadOp) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassColorAttachment) , "::" , stringify ! (loadOp))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . storeOp) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassColorAttachment) , "::" , stringify ! (storeOp))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . clearValue) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassColorAttachment) , "::" , stringify ! (clearValue))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPURequiredLimits { pub nextInChain : * const WGPUChainedStruct , pub limits : WGPULimits , } # [test] fn bindgen_test_layout_WGPURequiredLimits () { const UNINIT : :: std :: mem :: MaybeUninit < WGPURequiredLimits > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPURequiredLimits > () , 152usize , concat ! ("Size of: " , stringify ! (WGPURequiredLimits))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPURequiredLimits > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPURequiredLimits))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPURequiredLimits) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . limits) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPURequiredLimits) , "::" , stringify ! (limits))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUShaderModuleDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , pub hintCount : usize , pub hints : * const WGPUShaderModuleCompilationHint , } # [test] fn bindgen_test_layout_WGPUShaderModuleDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUShaderModuleDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUShaderModuleDescriptor > () , 32usize , concat ! ("Size of: " , stringify ! (WGPUShaderModuleDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUShaderModuleDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUShaderModuleDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleDescriptor) , "::" , stringify ! (label))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . hintCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleDescriptor) , "::" , stringify ! (hintCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . hints) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleDescriptor) , "::" , stringify ! (hints))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUSupportedLimits { pub nextInChain : * mut WGPUChainedStructOut , pub limits : WGPULimits , } # [test] fn bindgen_test_layout_WGPUSupportedLimits () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUSupportedLimits > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUSupportedLimits > () , 152usize , concat ! ("Size of: " , stringify ! (WGPUSupportedLimits))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUSupportedLimits > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUSupportedLimits))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUSupportedLimits) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . limits) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUSupportedLimits) , "::" , stringify ! (limits))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUTextureDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , pub usage : WGPUTextureUsageFlags , pub dimension : WGPUTextureDimension , pub size : WGPUExtent3D , pub format : WGPUTextureFormat , pub mipLevelCount : u32 , pub sampleCount : u32 , pub viewFormatCount : usize , pub viewFormats : * const WGPUTextureFormat , } # [test] fn bindgen_test_layout_WGPUTextureDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUTextureDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUTextureDescriptor > () , 64usize , concat ! ("Size of: " , stringify ! (WGPUTextureDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUTextureDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUTextureDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureDescriptor) , "::" , stringify ! (label))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . usage) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureDescriptor) , "::" , stringify ! (usage))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . dimension) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureDescriptor) , "::" , stringify ! (dimension))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . size) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureDescriptor) , "::" , stringify ! (size))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . format) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureDescriptor) , "::" , stringify ! (format))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . mipLevelCount) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureDescriptor) , "::" , stringify ! (mipLevelCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . sampleCount) as usize - ptr as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureDescriptor) , "::" , stringify ! (sampleCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . viewFormatCount) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureDescriptor) , "::" , stringify ! (viewFormatCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . viewFormats) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (WGPUTextureDescriptor) , "::" , stringify ! (viewFormats))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUVertexBufferLayout { pub arrayStride : u64 , pub stepMode : WGPUVertexStepMode , pub attributeCount : usize , pub attributes : * const WGPUVertexAttribute , } # [test] fn bindgen_test_layout_WGPUVertexBufferLayout () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUVertexBufferLayout > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUVertexBufferLayout > () , 32usize , concat ! ("Size of: " , stringify ! (WGPUVertexBufferLayout))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUVertexBufferLayout > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUVertexBufferLayout))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . arrayStride) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUVertexBufferLayout) , "::" , stringify ! (arrayStride))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . stepMode) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUVertexBufferLayout) , "::" , stringify ! (stepMode))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . attributeCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUVertexBufferLayout) , "::" , stringify ! (attributeCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . attributes) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUVertexBufferLayout) , "::" , stringify ! (attributes))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUBindGroupLayoutDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , pub entryCount : usize , pub entries : * const WGPUBindGroupLayoutEntry , } # [test] fn bindgen_test_layout_WGPUBindGroupLayoutDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUBindGroupLayoutDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUBindGroupLayoutDescriptor > () , 32usize , concat ! ("Size of: " , stringify ! (WGPUBindGroupLayoutDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUBindGroupLayoutDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUBindGroupLayoutDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupLayoutDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupLayoutDescriptor) , "::" , stringify ! (label))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . entryCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupLayoutDescriptor) , "::" , stringify ! (entryCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . entries) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupLayoutDescriptor) , "::" , stringify ! (entries))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUColorTargetState { pub nextInChain : * const WGPUChainedStruct , pub format : WGPUTextureFormat , pub blend : * const WGPUBlendState , pub writeMask : WGPUColorWriteMaskFlags , } # [test] fn bindgen_test_layout_WGPUColorTargetState () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUColorTargetState > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUColorTargetState > () , 32usize , concat ! ("Size of: " , stringify ! (WGPUColorTargetState))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUColorTargetState > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUColorTargetState))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUColorTargetState) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . format) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUColorTargetState) , "::" , stringify ! (format))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . blend) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUColorTargetState) , "::" , stringify ! (blend))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . writeMask) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUColorTargetState) , "::" , stringify ! (writeMask))) ; } # [repr (C)] pub struct WGPUComputePipelineDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , pub layout : WGPUPipelineLayout , pub compute : WGPUProgrammableStageDescriptor , } # [test] fn bindgen_test_layout_WGPUComputePipelineDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUComputePipelineDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUComputePipelineDescriptor > () , 64usize , concat ! ("Size of: " , stringify ! (WGPUComputePipelineDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUComputePipelineDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUComputePipelineDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUComputePipelineDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUComputePipelineDescriptor) , "::" , stringify ! (label))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . layout) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUComputePipelineDescriptor) , "::" , stringify ! (layout))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . compute) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUComputePipelineDescriptor) , "::" , stringify ! (compute))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUDeviceDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , pub requiredFeatureCount : usize , pub requiredFeatures : * const WGPUFeatureName , pub requiredLimits : * const WGPURequiredLimits , pub defaultQueue : WGPUQueueDescriptor , pub deviceLostCallback : WGPUDeviceLostCallback , pub deviceLostUserdata : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout_WGPUDeviceDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUDeviceDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUDeviceDescriptor > () , 72usize , concat ! ("Size of: " , stringify ! (WGPUDeviceDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUDeviceDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUDeviceDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUDeviceDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUDeviceDescriptor) , "::" , stringify ! (label))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . requiredFeatureCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUDeviceDescriptor) , "::" , stringify ! (requiredFeatureCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . requiredFeatures) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUDeviceDescriptor) , "::" , stringify ! (requiredFeatures))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . requiredLimits) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUDeviceDescriptor) , "::" , stringify ! (requiredLimits))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . defaultQueue) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUDeviceDescriptor) , "::" , stringify ! (defaultQueue))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . deviceLostCallback) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (WGPUDeviceDescriptor) , "::" , stringify ! (deviceLostCallback))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . deviceLostUserdata) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (WGPUDeviceDescriptor) , "::" , stringify ! (deviceLostUserdata))) ; } # [repr (C)] pub struct WGPURenderPassDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , pub colorAttachmentCount : usize , pub colorAttachments : * const WGPURenderPassColorAttachment , pub depthStencilAttachment : * const WGPURenderPassDepthStencilAttachment , pub occlusionQuerySet : WGPUQuerySet , pub timestampWrites : * const WGPURenderPassTimestampWrites , } # [test] fn bindgen_test_layout_WGPURenderPassDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPURenderPassDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPURenderPassDescriptor > () , 56usize , concat ! ("Size of: " , stringify ! (WGPURenderPassDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPURenderPassDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPURenderPassDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDescriptor) , "::" , stringify ! (label))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . colorAttachmentCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDescriptor) , "::" , stringify ! (colorAttachmentCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . colorAttachments) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDescriptor) , "::" , stringify ! (colorAttachments))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . depthStencilAttachment) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDescriptor) , "::" , stringify ! (depthStencilAttachment))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . occlusionQuerySet) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDescriptor) , "::" , stringify ! (occlusionQuerySet))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . timestampWrites) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPassDescriptor) , "::" , stringify ! (timestampWrites))) ; } # [repr (C)] pub struct WGPUVertexState { pub nextInChain : * const WGPUChainedStruct , pub module : WGPUShaderModule , pub entryPoint : * const :: std :: os :: raw :: c_char , pub constantCount : usize , pub constants : * const WGPUConstantEntry , pub bufferCount : usize , pub buffers : * const WGPUVertexBufferLayout , } # [test] fn bindgen_test_layout_WGPUVertexState () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUVertexState > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUVertexState > () , 56usize , concat ! ("Size of: " , stringify ! (WGPUVertexState))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUVertexState > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUVertexState))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUVertexState) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . module) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUVertexState) , "::" , stringify ! (module))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . entryPoint) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUVertexState) , "::" , stringify ! (entryPoint))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . constantCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUVertexState) , "::" , stringify ! (constantCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . constants) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUVertexState) , "::" , stringify ! (constants))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bufferCount) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUVertexState) , "::" , stringify ! (bufferCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . buffers) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (WGPUVertexState) , "::" , stringify ! (buffers))) ; } # [repr (C)] pub struct WGPUFragmentState { pub nextInChain : * const WGPUChainedStruct , pub module : WGPUShaderModule , pub entryPoint : * const :: std :: os :: raw :: c_char , pub constantCount : usize , pub constants : * const WGPUConstantEntry , pub targetCount : usize , pub targets : * const WGPUColorTargetState , } # [test] fn bindgen_test_layout_WGPUFragmentState () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUFragmentState > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUFragmentState > () , 56usize , concat ! ("Size of: " , stringify ! (WGPUFragmentState))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUFragmentState > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUFragmentState))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUFragmentState) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . module) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUFragmentState) , "::" , stringify ! (module))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . entryPoint) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUFragmentState) , "::" , stringify ! (entryPoint))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . constantCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUFragmentState) , "::" , stringify ! (constantCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . constants) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUFragmentState) , "::" , stringify ! (constants))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . targetCount) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUFragmentState) , "::" , stringify ! (targetCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . targets) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (WGPUFragmentState) , "::" , stringify ! (targets))) ; } # [repr (C)] pub struct WGPURenderPipelineDescriptor { pub nextInChain : * const WGPUChainedStruct , pub label : * const :: std :: os :: raw :: c_char , pub layout : WGPUPipelineLayout , pub vertex : WGPUVertexState , pub primitive : WGPUPrimitiveState , pub depthStencil : * const WGPUDepthStencilState , pub multisample : WGPUMultisampleState , pub fragment : * const WGPUFragmentState , } # [test] fn bindgen_test_layout_WGPURenderPipelineDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPURenderPipelineDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPURenderPipelineDescriptor > () , 144usize , concat ! ("Size of: " , stringify ! (WGPURenderPipelineDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPURenderPipelineDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPURenderPipelineDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPipelineDescriptor) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . label) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPipelineDescriptor) , "::" , stringify ! (label))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . layout) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPipelineDescriptor) , "::" , stringify ! (layout))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . vertex) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPipelineDescriptor) , "::" , stringify ! (vertex))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . primitive) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPipelineDescriptor) , "::" , stringify ! (primitive))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . depthStencil) as usize - ptr as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPipelineDescriptor) , "::" , stringify ! (depthStencil))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . multisample) as usize - ptr as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPipelineDescriptor) , "::" , stringify ! (multisample))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . fragment) as usize - ptr as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (WGPURenderPipelineDescriptor) , "::" , stringify ! (fragment))) ; } pub type WGPUProcCreateInstance = :: std :: option :: Option < unsafe extern "C" fn (descriptor : * const WGPUInstanceDescriptor) -> WGPUInstance > ; pub type WGPUProcGetProcAddress = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , procName : * const :: std :: os :: raw :: c_char) -> WGPUProc > ; pub type WGPUProcAdapterEnumerateFeatures = :: std :: option :: Option < unsafe extern "C" fn (adapter : WGPUAdapter , features : * mut WGPUFeatureName) -> usize > ; pub type WGPUProcAdapterGetLimits = :: std :: option :: Option < unsafe extern "C" fn (adapter : WGPUAdapter , limits : * mut WGPUSupportedLimits) -> WGPUBool > ; pub type WGPUProcAdapterGetProperties = :: std :: option :: Option < unsafe extern "C" fn (adapter : WGPUAdapter , properties : * mut WGPUAdapterProperties) > ; pub type WGPUProcAdapterHasFeature = :: std :: option :: Option < unsafe extern "C" fn (adapter : WGPUAdapter , feature : WGPUFeatureName) -> WGPUBool > ; pub type WGPUProcAdapterRequestAdapterInfo = :: std :: option :: Option < unsafe extern "C" fn (adapter : WGPUAdapter , callback : WGPUAdapterRequestAdapterInfoCallback , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUProcAdapterRequestDevice = :: std :: option :: Option < unsafe extern "C" fn (adapter : WGPUAdapter , descriptor : * const WGPUDeviceDescriptor , callback : WGPUAdapterRequestDeviceCallback , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUProcAdapterReference = :: std :: option :: Option < unsafe extern "C" fn (adapter : WGPUAdapter) > ; pub type WGPUProcAdapterRelease = :: std :: option :: Option < unsafe extern "C" fn (adapter : WGPUAdapter) > ; pub type WGPUProcBindGroupSetLabel = :: std :: option :: Option < unsafe extern "C" fn (bindGroup : WGPUBindGroup , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcBindGroupReference = :: std :: option :: Option < unsafe extern "C" fn (bindGroup : WGPUBindGroup) > ; pub type WGPUProcBindGroupRelease = :: std :: option :: Option < unsafe extern "C" fn (bindGroup : WGPUBindGroup) > ; pub type WGPUProcBindGroupLayoutSetLabel = :: std :: option :: Option < unsafe extern "C" fn (bindGroupLayout : WGPUBindGroupLayout , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcBindGroupLayoutReference = :: std :: option :: Option < unsafe extern "C" fn (bindGroupLayout : WGPUBindGroupLayout) > ; pub type WGPUProcBindGroupLayoutRelease = :: std :: option :: Option < unsafe extern "C" fn (bindGroupLayout : WGPUBindGroupLayout) > ; pub type WGPUProcBufferDestroy = :: std :: option :: Option < unsafe extern "C" fn (buffer : WGPUBuffer) > ; pub type WGPUProcBufferGetConstMappedRange = :: std :: option :: Option < unsafe extern "C" fn (buffer : WGPUBuffer , offset : usize , size : usize) -> * const :: std :: os :: raw :: c_void > ; pub type WGPUProcBufferGetMapState = :: std :: option :: Option < unsafe extern "C" fn (buffer : WGPUBuffer) -> WGPUBufferMapState > ; pub type WGPUProcBufferGetMappedRange = :: std :: option :: Option < unsafe extern "C" fn (buffer : WGPUBuffer , offset : usize , size : usize) -> * mut :: std :: os :: raw :: c_void > ; pub type WGPUProcBufferGetSize = :: std :: option :: Option < unsafe extern "C" fn (buffer : WGPUBuffer) -> u64 > ; pub type WGPUProcBufferGetUsage = :: std :: option :: Option < unsafe extern "C" fn (buffer : WGPUBuffer) -> WGPUBufferUsageFlags > ; pub type WGPUProcBufferMapAsync = :: std :: option :: Option < unsafe extern "C" fn (buffer : WGPUBuffer , mode : WGPUMapModeFlags , offset : usize , size : usize , callback : WGPUBufferMapAsyncCallback , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUProcBufferSetLabel = :: std :: option :: Option < unsafe extern "C" fn (buffer : WGPUBuffer , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcBufferUnmap = :: std :: option :: Option < unsafe extern "C" fn (buffer : WGPUBuffer) > ; pub type WGPUProcBufferReference = :: std :: option :: Option < unsafe extern "C" fn (buffer : WGPUBuffer) > ; pub type WGPUProcBufferRelease = :: std :: option :: Option < unsafe extern "C" fn (buffer : WGPUBuffer) > ; pub type WGPUProcCommandBufferSetLabel = :: std :: option :: Option < unsafe extern "C" fn (commandBuffer : WGPUCommandBuffer , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcCommandBufferReference = :: std :: option :: Option < unsafe extern "C" fn (commandBuffer : WGPUCommandBuffer) > ; pub type WGPUProcCommandBufferRelease = :: std :: option :: Option < unsafe extern "C" fn (commandBuffer : WGPUCommandBuffer) > ; pub type WGPUProcCommandEncoderBeginComputePass = :: std :: option :: Option < unsafe extern "C" fn (commandEncoder : WGPUCommandEncoder , descriptor : * const WGPUComputePassDescriptor) -> WGPUComputePassEncoder > ; pub type WGPUProcCommandEncoderBeginRenderPass = :: std :: option :: Option < unsafe extern "C" fn (commandEncoder : WGPUCommandEncoder , descriptor : * const WGPURenderPassDescriptor) -> WGPURenderPassEncoder > ; pub type WGPUProcCommandEncoderClearBuffer = :: std :: option :: Option < unsafe extern "C" fn (commandEncoder : WGPUCommandEncoder , buffer : WGPUBuffer , offset : u64 , size : u64) > ; pub type WGPUProcCommandEncoderCopyBufferToBuffer = :: std :: option :: Option < unsafe extern "C" fn (commandEncoder : WGPUCommandEncoder , source : WGPUBuffer , sourceOffset : u64 , destination : WGPUBuffer , destinationOffset : u64 , size : u64) > ; pub type WGPUProcCommandEncoderCopyBufferToTexture = :: std :: option :: Option < unsafe extern "C" fn (commandEncoder : WGPUCommandEncoder , source : * const WGPUImageCopyBuffer , destination : * const WGPUImageCopyTexture , copySize : * const WGPUExtent3D) > ; pub type WGPUProcCommandEncoderCopyTextureToBuffer = :: std :: option :: Option < unsafe extern "C" fn (commandEncoder : WGPUCommandEncoder , source : * const WGPUImageCopyTexture , destination : * const WGPUImageCopyBuffer , copySize : * const WGPUExtent3D) > ; pub type WGPUProcCommandEncoderCopyTextureToTexture = :: std :: option :: Option < unsafe extern "C" fn (commandEncoder : WGPUCommandEncoder , source : * const WGPUImageCopyTexture , destination : * const WGPUImageCopyTexture , copySize : * const WGPUExtent3D) > ; pub type WGPUProcCommandEncoderFinish = :: std :: option :: Option < unsafe extern "C" fn (commandEncoder : WGPUCommandEncoder , descriptor : * const WGPUCommandBufferDescriptor) -> WGPUCommandBuffer > ; pub type WGPUProcCommandEncoderInsertDebugMarker = :: std :: option :: Option < unsafe extern "C" fn (commandEncoder : WGPUCommandEncoder , markerLabel : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcCommandEncoderPopDebugGroup = :: std :: option :: Option < unsafe extern "C" fn (commandEncoder : WGPUCommandEncoder) > ; pub type WGPUProcCommandEncoderPushDebugGroup = :: std :: option :: Option < unsafe extern "C" fn (commandEncoder : WGPUCommandEncoder , groupLabel : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcCommandEncoderResolveQuerySet = :: std :: option :: Option < unsafe extern "C" fn (commandEncoder : WGPUCommandEncoder , querySet : WGPUQuerySet , firstQuery : u32 , queryCount : u32 , destination : WGPUBuffer , destinationOffset : u64) > ; pub type WGPUProcCommandEncoderSetLabel = :: std :: option :: Option < unsafe extern "C" fn (commandEncoder : WGPUCommandEncoder , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcCommandEncoderWriteTimestamp = :: std :: option :: Option < unsafe extern "C" fn (commandEncoder : WGPUCommandEncoder , querySet : WGPUQuerySet , queryIndex : u32) > ; pub type WGPUProcCommandEncoderReference = :: std :: option :: Option < unsafe extern "C" fn (commandEncoder : WGPUCommandEncoder) > ; pub type WGPUProcCommandEncoderRelease = :: std :: option :: Option < unsafe extern "C" fn (commandEncoder : WGPUCommandEncoder) > ; pub type WGPUProcComputePassEncoderDispatchWorkgroups = :: std :: option :: Option < unsafe extern "C" fn (computePassEncoder : WGPUComputePassEncoder , workgroupCountX : u32 , workgroupCountY : u32 , workgroupCountZ : u32) > ; pub type WGPUProcComputePassEncoderDispatchWorkgroupsIndirect = :: std :: option :: Option < unsafe extern "C" fn (computePassEncoder : WGPUComputePassEncoder , indirectBuffer : WGPUBuffer , indirectOffset : u64) > ; pub type WGPUProcComputePassEncoderEnd = :: std :: option :: Option < unsafe extern "C" fn (computePassEncoder : WGPUComputePassEncoder) > ; pub type WGPUProcComputePassEncoderInsertDebugMarker = :: std :: option :: Option < unsafe extern "C" fn (computePassEncoder : WGPUComputePassEncoder , markerLabel : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcComputePassEncoderPopDebugGroup = :: std :: option :: Option < unsafe extern "C" fn (computePassEncoder : WGPUComputePassEncoder) > ; pub type WGPUProcComputePassEncoderPushDebugGroup = :: std :: option :: Option < unsafe extern "C" fn (computePassEncoder : WGPUComputePassEncoder , groupLabel : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcComputePassEncoderSetBindGroup = :: std :: option :: Option < unsafe extern "C" fn (computePassEncoder : WGPUComputePassEncoder , groupIndex : u32 , group : WGPUBindGroup , dynamicOffsetCount : usize , dynamicOffsets : * const u32) > ; pub type WGPUProcComputePassEncoderSetLabel = :: std :: option :: Option < unsafe extern "C" fn (computePassEncoder : WGPUComputePassEncoder , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcComputePassEncoderSetPipeline = :: std :: option :: Option < unsafe extern "C" fn (computePassEncoder : WGPUComputePassEncoder , pipeline : WGPUComputePipeline) > ; pub type WGPUProcComputePassEncoderReference = :: std :: option :: Option < unsafe extern "C" fn (computePassEncoder : WGPUComputePassEncoder) > ; pub type WGPUProcComputePassEncoderRelease = :: std :: option :: Option < unsafe extern "C" fn (computePassEncoder : WGPUComputePassEncoder) > ; pub type WGPUProcComputePipelineGetBindGroupLayout = :: std :: option :: Option < unsafe extern "C" fn (computePipeline : WGPUComputePipeline , groupIndex : u32) -> WGPUBindGroupLayout > ; pub type WGPUProcComputePipelineSetLabel = :: std :: option :: Option < unsafe extern "C" fn (computePipeline : WGPUComputePipeline , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcComputePipelineReference = :: std :: option :: Option < unsafe extern "C" fn (computePipeline : WGPUComputePipeline) > ; pub type WGPUProcComputePipelineRelease = :: std :: option :: Option < unsafe extern "C" fn (computePipeline : WGPUComputePipeline) > ; pub type WGPUProcDeviceCreateBindGroup = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , descriptor : * const WGPUBindGroupDescriptor) -> WGPUBindGroup > ; pub type WGPUProcDeviceCreateBindGroupLayout = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , descriptor : * const WGPUBindGroupLayoutDescriptor) -> WGPUBindGroupLayout > ; pub type WGPUProcDeviceCreateBuffer = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , descriptor : * const WGPUBufferDescriptor) -> WGPUBuffer > ; pub type WGPUProcDeviceCreateCommandEncoder = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , descriptor : * const WGPUCommandEncoderDescriptor) -> WGPUCommandEncoder > ; pub type WGPUProcDeviceCreateComputePipeline = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , descriptor : * const WGPUComputePipelineDescriptor) -> WGPUComputePipeline > ; pub type WGPUProcDeviceCreateComputePipelineAsync = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , descriptor : * const WGPUComputePipelineDescriptor , callback : WGPUDeviceCreateComputePipelineAsyncCallback , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUProcDeviceCreatePipelineLayout = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , descriptor : * const WGPUPipelineLayoutDescriptor) -> WGPUPipelineLayout > ; pub type WGPUProcDeviceCreateQuerySet = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , descriptor : * const WGPUQuerySetDescriptor) -> WGPUQuerySet > ; pub type WGPUProcDeviceCreateRenderBundleEncoder = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , descriptor : * const WGPURenderBundleEncoderDescriptor) -> WGPURenderBundleEncoder > ; pub type WGPUProcDeviceCreateRenderPipeline = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , descriptor : * const WGPURenderPipelineDescriptor) -> WGPURenderPipeline > ; pub type WGPUProcDeviceCreateRenderPipelineAsync = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , descriptor : * const WGPURenderPipelineDescriptor , callback : WGPUDeviceCreateRenderPipelineAsyncCallback , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUProcDeviceCreateSampler = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , descriptor : * const WGPUSamplerDescriptor) -> WGPUSampler > ; pub type WGPUProcDeviceCreateShaderModule = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , descriptor : * const WGPUShaderModuleDescriptor) -> WGPUShaderModule > ; pub type WGPUProcDeviceCreateTexture = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , descriptor : * const WGPUTextureDescriptor) -> WGPUTexture > ; pub type WGPUProcDeviceDestroy = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice) > ; pub type WGPUProcDeviceEnumerateFeatures = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , features : * mut WGPUFeatureName) -> usize > ; pub type WGPUProcDeviceGetLimits = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , limits : * mut WGPUSupportedLimits) -> WGPUBool > ; pub type WGPUProcDeviceGetQueue = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice) -> WGPUQueue > ; pub type WGPUProcDeviceHasFeature = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , feature : WGPUFeatureName) -> WGPUBool > ; pub type WGPUProcDevicePopErrorScope = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , callback : WGPUErrorCallback , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUProcDevicePushErrorScope = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , filter : WGPUErrorFilter) > ; pub type WGPUProcDeviceSetLabel = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcDeviceSetUncapturedErrorCallback = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice , callback : WGPUErrorCallback , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUProcDeviceReference = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice) > ; pub type WGPUProcDeviceRelease = :: std :: option :: Option < unsafe extern "C" fn (device : WGPUDevice) > ; pub type WGPUProcInstanceCreateSurface = :: std :: option :: Option < unsafe extern "C" fn (instance : WGPUInstance , descriptor : * const WGPUSurfaceDescriptor) -> WGPUSurface > ; pub type WGPUProcInstanceHasWGSLLanguageFeature = :: std :: option :: Option < unsafe extern "C" fn (instance : WGPUInstance , feature : WGPUWGSLFeatureName) -> WGPUBool > ; pub type WGPUProcInstanceProcessEvents = :: std :: option :: Option < unsafe extern "C" fn (instance : WGPUInstance) > ; pub type WGPUProcInstanceRequestAdapter = :: std :: option :: Option < unsafe extern "C" fn (instance : WGPUInstance , options : * const WGPURequestAdapterOptions , callback : WGPUInstanceRequestAdapterCallback , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUProcInstanceReference = :: std :: option :: Option < unsafe extern "C" fn (instance : WGPUInstance) > ; pub type WGPUProcInstanceRelease = :: std :: option :: Option < unsafe extern "C" fn (instance : WGPUInstance) > ; pub type WGPUProcPipelineLayoutSetLabel = :: std :: option :: Option < unsafe extern "C" fn (pipelineLayout : WGPUPipelineLayout , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcPipelineLayoutReference = :: std :: option :: Option < unsafe extern "C" fn (pipelineLayout : WGPUPipelineLayout) > ; pub type WGPUProcPipelineLayoutRelease = :: std :: option :: Option < unsafe extern "C" fn (pipelineLayout : WGPUPipelineLayout) > ; pub type WGPUProcQuerySetDestroy = :: std :: option :: Option < unsafe extern "C" fn (querySet : WGPUQuerySet) > ; pub type WGPUProcQuerySetGetCount = :: std :: option :: Option < unsafe extern "C" fn (querySet : WGPUQuerySet) -> u32 > ; pub type WGPUProcQuerySetGetType = :: std :: option :: Option < unsafe extern "C" fn (querySet : WGPUQuerySet) -> WGPUQueryType > ; pub type WGPUProcQuerySetSetLabel = :: std :: option :: Option < unsafe extern "C" fn (querySet : WGPUQuerySet , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcQuerySetReference = :: std :: option :: Option < unsafe extern "C" fn (querySet : WGPUQuerySet) > ; pub type WGPUProcQuerySetRelease = :: std :: option :: Option < unsafe extern "C" fn (querySet : WGPUQuerySet) > ; pub type WGPUProcQueueOnSubmittedWorkDone = :: std :: option :: Option < unsafe extern "C" fn (queue : WGPUQueue , callback : WGPUQueueOnSubmittedWorkDoneCallback , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUProcQueueSetLabel = :: std :: option :: Option < unsafe extern "C" fn (queue : WGPUQueue , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcQueueSubmit = :: std :: option :: Option < unsafe extern "C" fn (queue : WGPUQueue , commandCount : usize , commands : * const WGPUCommandBuffer) > ; pub type WGPUProcQueueWriteBuffer = :: std :: option :: Option < unsafe extern "C" fn (queue : WGPUQueue , buffer : WGPUBuffer , bufferOffset : u64 , data : * const :: std :: os :: raw :: c_void , size : usize) > ; pub type WGPUProcQueueWriteTexture = :: std :: option :: Option < unsafe extern "C" fn (queue : WGPUQueue , destination : * const WGPUImageCopyTexture , data : * const :: std :: os :: raw :: c_void , dataSize : usize , dataLayout : * const WGPUTextureDataLayout , writeSize : * const WGPUExtent3D) > ; pub type WGPUProcQueueReference = :: std :: option :: Option < unsafe extern "C" fn (queue : WGPUQueue) > ; pub type WGPUProcQueueRelease = :: std :: option :: Option < unsafe extern "C" fn (queue : WGPUQueue) > ; pub type WGPUProcRenderBundleSetLabel = :: std :: option :: Option < unsafe extern "C" fn (renderBundle : WGPURenderBundle , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcRenderBundleReference = :: std :: option :: Option < unsafe extern "C" fn (renderBundle : WGPURenderBundle) > ; pub type WGPUProcRenderBundleRelease = :: std :: option :: Option < unsafe extern "C" fn (renderBundle : WGPURenderBundle) > ; pub type WGPUProcRenderBundleEncoderDraw = :: std :: option :: Option < unsafe extern "C" fn (renderBundleEncoder : WGPURenderBundleEncoder , vertexCount : u32 , instanceCount : u32 , firstVertex : u32 , firstInstance : u32) > ; pub type WGPUProcRenderBundleEncoderDrawIndexed = :: std :: option :: Option < unsafe extern "C" fn (renderBundleEncoder : WGPURenderBundleEncoder , indexCount : u32 , instanceCount : u32 , firstIndex : u32 , baseVertex : i32 , firstInstance : u32) > ; pub type WGPUProcRenderBundleEncoderDrawIndexedIndirect = :: std :: option :: Option < unsafe extern "C" fn (renderBundleEncoder : WGPURenderBundleEncoder , indirectBuffer : WGPUBuffer , indirectOffset : u64) > ; pub type WGPUProcRenderBundleEncoderDrawIndirect = :: std :: option :: Option < unsafe extern "C" fn (renderBundleEncoder : WGPURenderBundleEncoder , indirectBuffer : WGPUBuffer , indirectOffset : u64) > ; pub type WGPUProcRenderBundleEncoderFinish = :: std :: option :: Option < unsafe extern "C" fn (renderBundleEncoder : WGPURenderBundleEncoder , descriptor : * const WGPURenderBundleDescriptor) -> WGPURenderBundle > ; pub type WGPUProcRenderBundleEncoderInsertDebugMarker = :: std :: option :: Option < unsafe extern "C" fn (renderBundleEncoder : WGPURenderBundleEncoder , markerLabel : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcRenderBundleEncoderPopDebugGroup = :: std :: option :: Option < unsafe extern "C" fn (renderBundleEncoder : WGPURenderBundleEncoder) > ; pub type WGPUProcRenderBundleEncoderPushDebugGroup = :: std :: option :: Option < unsafe extern "C" fn (renderBundleEncoder : WGPURenderBundleEncoder , groupLabel : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcRenderBundleEncoderSetBindGroup = :: std :: option :: Option < unsafe extern "C" fn (renderBundleEncoder : WGPURenderBundleEncoder , groupIndex : u32 , group : WGPUBindGroup , dynamicOffsetCount : usize , dynamicOffsets : * const u32) > ; pub type WGPUProcRenderBundleEncoderSetIndexBuffer = :: std :: option :: Option < unsafe extern "C" fn (renderBundleEncoder : WGPURenderBundleEncoder , buffer : WGPUBuffer , format : WGPUIndexFormat , offset : u64 , size : u64) > ; pub type WGPUProcRenderBundleEncoderSetLabel = :: std :: option :: Option < unsafe extern "C" fn (renderBundleEncoder : WGPURenderBundleEncoder , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcRenderBundleEncoderSetPipeline = :: std :: option :: Option < unsafe extern "C" fn (renderBundleEncoder : WGPURenderBundleEncoder , pipeline : WGPURenderPipeline) > ; pub type WGPUProcRenderBundleEncoderSetVertexBuffer = :: std :: option :: Option < unsafe extern "C" fn (renderBundleEncoder : WGPURenderBundleEncoder , slot : u32 , buffer : WGPUBuffer , offset : u64 , size : u64) > ; pub type WGPUProcRenderBundleEncoderReference = :: std :: option :: Option < unsafe extern "C" fn (renderBundleEncoder : WGPURenderBundleEncoder) > ; pub type WGPUProcRenderBundleEncoderRelease = :: std :: option :: Option < unsafe extern "C" fn (renderBundleEncoder : WGPURenderBundleEncoder) > ; pub type WGPUProcRenderPassEncoderBeginOcclusionQuery = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , queryIndex : u32) > ; pub type WGPUProcRenderPassEncoderDraw = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , vertexCount : u32 , instanceCount : u32 , firstVertex : u32 , firstInstance : u32) > ; pub type WGPUProcRenderPassEncoderDrawIndexed = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , indexCount : u32 , instanceCount : u32 , firstIndex : u32 , baseVertex : i32 , firstInstance : u32) > ; pub type WGPUProcRenderPassEncoderDrawIndexedIndirect = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , indirectBuffer : WGPUBuffer , indirectOffset : u64) > ; pub type WGPUProcRenderPassEncoderDrawIndirect = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , indirectBuffer : WGPUBuffer , indirectOffset : u64) > ; pub type WGPUProcRenderPassEncoderEnd = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder) > ; pub type WGPUProcRenderPassEncoderEndOcclusionQuery = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder) > ; pub type WGPUProcRenderPassEncoderExecuteBundles = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , bundleCount : usize , bundles : * const WGPURenderBundle) > ; pub type WGPUProcRenderPassEncoderInsertDebugMarker = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , markerLabel : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcRenderPassEncoderPopDebugGroup = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder) > ; pub type WGPUProcRenderPassEncoderPushDebugGroup = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , groupLabel : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcRenderPassEncoderSetBindGroup = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , groupIndex : u32 , group : WGPUBindGroup , dynamicOffsetCount : usize , dynamicOffsets : * const u32) > ; pub type WGPUProcRenderPassEncoderSetBlendConstant = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , color : * const WGPUColor) > ; pub type WGPUProcRenderPassEncoderSetIndexBuffer = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , buffer : WGPUBuffer , format : WGPUIndexFormat , offset : u64 , size : u64) > ; pub type WGPUProcRenderPassEncoderSetLabel = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcRenderPassEncoderSetPipeline = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , pipeline : WGPURenderPipeline) > ; pub type WGPUProcRenderPassEncoderSetScissorRect = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , x : u32 , y : u32 , width : u32 , height : u32) > ; pub type WGPUProcRenderPassEncoderSetStencilReference = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , reference : u32) > ; pub type WGPUProcRenderPassEncoderSetVertexBuffer = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , slot : u32 , buffer : WGPUBuffer , offset : u64 , size : u64) > ; pub type WGPUProcRenderPassEncoderSetViewport = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder , x : f32 , y : f32 , width : f32 , height : f32 , minDepth : f32 , maxDepth : f32) > ; pub type WGPUProcRenderPassEncoderReference = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder) > ; pub type WGPUProcRenderPassEncoderRelease = :: std :: option :: Option < unsafe extern "C" fn (renderPassEncoder : WGPURenderPassEncoder) > ; pub type WGPUProcRenderPipelineGetBindGroupLayout = :: std :: option :: Option < unsafe extern "C" fn (renderPipeline : WGPURenderPipeline , groupIndex : u32) -> WGPUBindGroupLayout > ; pub type WGPUProcRenderPipelineSetLabel = :: std :: option :: Option < unsafe extern "C" fn (renderPipeline : WGPURenderPipeline , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcRenderPipelineReference = :: std :: option :: Option < unsafe extern "C" fn (renderPipeline : WGPURenderPipeline) > ; pub type WGPUProcRenderPipelineRelease = :: std :: option :: Option < unsafe extern "C" fn (renderPipeline : WGPURenderPipeline) > ; pub type WGPUProcSamplerSetLabel = :: std :: option :: Option < unsafe extern "C" fn (sampler : WGPUSampler , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcSamplerReference = :: std :: option :: Option < unsafe extern "C" fn (sampler : WGPUSampler) > ; pub type WGPUProcSamplerRelease = :: std :: option :: Option < unsafe extern "C" fn (sampler : WGPUSampler) > ; pub type WGPUProcShaderModuleGetCompilationInfo = :: std :: option :: Option < unsafe extern "C" fn (shaderModule : WGPUShaderModule , callback : WGPUShaderModuleGetCompilationInfoCallback , userdata : * mut :: std :: os :: raw :: c_void) > ; pub type WGPUProcShaderModuleSetLabel = :: std :: option :: Option < unsafe extern "C" fn (shaderModule : WGPUShaderModule , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcShaderModuleReference = :: std :: option :: Option < unsafe extern "C" fn (shaderModule : WGPUShaderModule) > ; pub type WGPUProcShaderModuleRelease = :: std :: option :: Option < unsafe extern "C" fn (shaderModule : WGPUShaderModule) > ; pub type WGPUProcSurfaceConfigure = :: std :: option :: Option < unsafe extern "C" fn (surface : WGPUSurface , config : * const WGPUSurfaceConfiguration) > ; pub type WGPUProcSurfaceGetCapabilities = :: std :: option :: Option < unsafe extern "C" fn (surface : WGPUSurface , adapter : WGPUAdapter , capabilities : * mut WGPUSurfaceCapabilities) > ; pub type WGPUProcSurfaceGetCurrentTexture = :: std :: option :: Option < unsafe extern "C" fn (surface : WGPUSurface , surfaceTexture : * mut WGPUSurfaceTexture) > ; pub type WGPUProcSurfaceGetPreferredFormat = :: std :: option :: Option < unsafe extern "C" fn (surface : WGPUSurface , adapter : WGPUAdapter) -> WGPUTextureFormat > ; pub type WGPUProcSurfacePresent = :: std :: option :: Option < unsafe extern "C" fn (surface : WGPUSurface) > ; pub type WGPUProcSurfaceSetLabel = :: std :: option :: Option < unsafe extern "C" fn (surface : WGPUSurface , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcSurfaceUnconfigure = :: std :: option :: Option < unsafe extern "C" fn (surface : WGPUSurface) > ; pub type WGPUProcSurfaceReference = :: std :: option :: Option < unsafe extern "C" fn (surface : WGPUSurface) > ; pub type WGPUProcSurfaceRelease = :: std :: option :: Option < unsafe extern "C" fn (surface : WGPUSurface) > ; pub type WGPUProcSurfaceCapabilitiesFreeMembers = :: std :: option :: Option < unsafe extern "C" fn (surfaceCapabilities : WGPUSurfaceCapabilities) > ; pub type WGPUProcTextureCreateView = :: std :: option :: Option < unsafe extern "C" fn (texture : WGPUTexture , descriptor : * const WGPUTextureViewDescriptor) -> WGPUTextureView > ; pub type WGPUProcTextureDestroy = :: std :: option :: Option < unsafe extern "C" fn (texture : WGPUTexture) > ; pub type WGPUProcTextureGetDepthOrArrayLayers = :: std :: option :: Option < unsafe extern "C" fn (texture : WGPUTexture) -> u32 > ; pub type WGPUProcTextureGetDimension = :: std :: option :: Option < unsafe extern "C" fn (texture : WGPUTexture) -> WGPUTextureDimension > ; pub type WGPUProcTextureGetFormat = :: std :: option :: Option < unsafe extern "C" fn (texture : WGPUTexture) -> WGPUTextureFormat > ; pub type WGPUProcTextureGetHeight = :: std :: option :: Option < unsafe extern "C" fn (texture : WGPUTexture) -> u32 > ; pub type WGPUProcTextureGetMipLevelCount = :: std :: option :: Option < unsafe extern "C" fn (texture : WGPUTexture) -> u32 > ; pub type WGPUProcTextureGetSampleCount = :: std :: option :: Option < unsafe extern "C" fn (texture : WGPUTexture) -> u32 > ; pub type WGPUProcTextureGetUsage = :: std :: option :: Option < unsafe extern "C" fn (texture : WGPUTexture) -> WGPUTextureUsageFlags > ; pub type WGPUProcTextureGetWidth = :: std :: option :: Option < unsafe extern "C" fn (texture : WGPUTexture) -> u32 > ; pub type WGPUProcTextureSetLabel = :: std :: option :: Option < unsafe extern "C" fn (texture : WGPUTexture , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcTextureReference = :: std :: option :: Option < unsafe extern "C" fn (texture : WGPUTexture) > ; pub type WGPUProcTextureRelease = :: std :: option :: Option < unsafe extern "C" fn (texture : WGPUTexture) > ; pub type WGPUProcTextureViewSetLabel = :: std :: option :: Option < unsafe extern "C" fn (textureView : WGPUTextureView , label : * const :: std :: os :: raw :: c_char) > ; pub type WGPUProcTextureViewReference = :: std :: option :: Option < unsafe extern "C" fn (textureView : WGPUTextureView) > ; pub type WGPUProcTextureViewRelease = :: std :: option :: Option < unsafe extern "C" fn (textureView : WGPUTextureView) > ; pub const WGPUSType_DeviceExtras : WGPUNativeSType = 196609 ; pub const WGPUSType_RequiredLimitsExtras : WGPUNativeSType = 196610 ; pub const WGPUSType_PipelineLayoutExtras : WGPUNativeSType = 196611 ; pub const WGPUSType_ShaderModuleGLSLDescriptor : WGPUNativeSType = 196612 ; pub const WGPUSType_SupportedLimitsExtras : WGPUNativeSType = 196613 ; pub const WGPUSType_InstanceExtras : WGPUNativeSType = 196614 ; pub const WGPUSType_BindGroupEntryExtras : WGPUNativeSType = 196615 ; pub const WGPUSType_BindGroupLayoutEntryExtras : WGPUNativeSType = 196616 ; pub const WGPUSType_QuerySetDescriptorExtras : WGPUNativeSType = 196617 ; pub const WGPUSType_SurfaceConfigurationExtras : WGPUNativeSType = 196618 ; pub const WGPUNativeSType_Force32 : WGPUNativeSType = 2147483647 ; pub type WGPUNativeSType = :: std :: os :: raw :: c_uint ; pub const WGPUNativeFeature_PushConstants : WGPUNativeFeature = 196609 ; pub const WGPUNativeFeature_TextureAdapterSpecificFormatFeatures : WGPUNativeFeature = 196610 ; pub const WGPUNativeFeature_MultiDrawIndirect : WGPUNativeFeature = 196611 ; pub const WGPUNativeFeature_MultiDrawIndirectCount : WGPUNativeFeature = 196612 ; pub const WGPUNativeFeature_VertexWritableStorage : WGPUNativeFeature = 196613 ; pub const WGPUNativeFeature_TextureBindingArray : WGPUNativeFeature = 196614 ; pub const WGPUNativeFeature_SampledTextureAndStorageBufferArrayNonUniformIndexing : WGPUNativeFeature = 196615 ; pub const WGPUNativeFeature_PipelineStatisticsQuery : WGPUNativeFeature = 196616 ; pub const WGPUNativeFeature_StorageResourceBindingArray : WGPUNativeFeature = 196617 ; pub const WGPUNativeFeature_PartiallyBoundBindingArray : WGPUNativeFeature = 196618 ; pub const WGPUNativeFeature_TextureFormat16bitNorm : WGPUNativeFeature = 196619 ; pub const WGPUNativeFeature_TextureCompressionAstcHdr : WGPUNativeFeature = 196620 ; pub const WGPUNativeFeature_MappablePrimaryBuffers : WGPUNativeFeature = 196622 ; pub const WGPUNativeFeature_BufferBindingArray : WGPUNativeFeature = 196623 ; pub const WGPUNativeFeature_UniformBufferAndStorageTextureArrayNonUniformIndexing : WGPUNativeFeature = 196624 ; pub const WGPUNativeFeature_VertexAttribute64bit : WGPUNativeFeature = 196633 ; pub const WGPUNativeFeature_ShaderUnusedVertexOutput : WGPUNativeFeature = 196634 ; pub const WGPUNativeFeature_TextureFormatNv12 : WGPUNativeFeature = 196635 ; pub const WGPUNativeFeature_RayTracingAccelerationStructure : WGPUNativeFeature = 196636 ; pub const WGPUNativeFeature_RayQuery : WGPUNativeFeature = 196637 ; pub const WGPUNativeFeature_ShaderF64 : WGPUNativeFeature = 196638 ; pub const WGPUNativeFeature_ShaderI16 : WGPUNativeFeature = 196639 ; pub const WGPUNativeFeature_ShaderPrimitiveIndex : WGPUNativeFeature = 196640 ; pub const WGPUNativeFeature_ShaderEarlyDepthTest : WGPUNativeFeature = 196641 ; pub const WGPUNativeFeature_Force32 : WGPUNativeFeature = 2147483647 ; pub type WGPUNativeFeature = :: std :: os :: raw :: c_uint ; pub const WGPULogLevel_Off : WGPULogLevel = 0 ; pub const WGPULogLevel_Error : WGPULogLevel = 1 ; pub const WGPULogLevel_Warn : WGPULogLevel = 2 ; pub const WGPULogLevel_Info : WGPULogLevel = 3 ; pub const WGPULogLevel_Debug : WGPULogLevel = 4 ; pub const WGPULogLevel_Trace : WGPULogLevel = 5 ; pub const WGPULogLevel_Force32 : WGPULogLevel = 2147483647 ; pub type WGPULogLevel = :: std :: os :: raw :: c_uint ; pub const WGPUInstanceBackend_All : WGPUInstanceBackend = 0 ; pub const WGPUInstanceBackend_Vulkan : WGPUInstanceBackend = 1 ; pub const WGPUInstanceBackend_GL : WGPUInstanceBackend = 2 ; pub const WGPUInstanceBackend_Metal : WGPUInstanceBackend = 4 ; pub const WGPUInstanceBackend_DX12 : WGPUInstanceBackend = 8 ; pub const WGPUInstanceBackend_DX11 : WGPUInstanceBackend = 16 ; pub const WGPUInstanceBackend_BrowserWebGPU : WGPUInstanceBackend = 32 ; pub const WGPUInstanceBackend_Primary : WGPUInstanceBackend = 45 ; pub const WGPUInstanceBackend_Secondary : WGPUInstanceBackend = 18 ; pub const WGPUInstanceBackend_Force32 : WGPUInstanceBackend = 2147483647 ; pub type WGPUInstanceBackend = :: std :: os :: raw :: c_uint ; pub type WGPUInstanceBackendFlags = WGPUFlags ; pub const WGPUInstanceFlag_Default : WGPUInstanceFlag = 0 ; pub const WGPUInstanceFlag_Debug : WGPUInstanceFlag = 1 ; pub const WGPUInstanceFlag_Validation : WGPUInstanceFlag = 2 ; pub const WGPUInstanceFlag_DiscardHalLabels : WGPUInstanceFlag = 4 ; pub const WGPUInstanceFlag_Force32 : WGPUInstanceFlag = 2147483647 ; pub type WGPUInstanceFlag = :: std :: os :: raw :: c_uint ; pub type WGPUInstanceFlags = WGPUFlags ; pub const WGPUDx12Compiler_Undefined : WGPUDx12Compiler = 0 ; pub const WGPUDx12Compiler_Fxc : WGPUDx12Compiler = 1 ; pub const WGPUDx12Compiler_Dxc : WGPUDx12Compiler = 2 ; pub const WGPUDx12Compiler_Force32 : WGPUDx12Compiler = 2147483647 ; pub type WGPUDx12Compiler = :: std :: os :: raw :: c_uint ; pub const WGPUGles3MinorVersion_Automatic : WGPUGles3MinorVersion = 0 ; pub const WGPUGles3MinorVersion_Version0 : WGPUGles3MinorVersion = 1 ; pub const WGPUGles3MinorVersion_Version1 : WGPUGles3MinorVersion = 2 ; pub const WGPUGles3MinorVersion_Version2 : WGPUGles3MinorVersion = 3 ; pub const WGPUGles3MinorVersion_Force32 : WGPUGles3MinorVersion = 2147483647 ; pub type WGPUGles3MinorVersion = :: std :: os :: raw :: c_uint ; pub const WGPUPipelineStatisticName_VertexShaderInvocations : WGPUPipelineStatisticName = 0 ; pub const WGPUPipelineStatisticName_ClipperInvocations : WGPUPipelineStatisticName = 1 ; pub const WGPUPipelineStatisticName_ClipperPrimitivesOut : WGPUPipelineStatisticName = 2 ; pub const WGPUPipelineStatisticName_FragmentShaderInvocations : WGPUPipelineStatisticName = 3 ; pub const WGPUPipelineStatisticName_ComputeShaderInvocations : WGPUPipelineStatisticName = 4 ; pub const WGPUPipelineStatisticName_Force32 : WGPUPipelineStatisticName = 2147483647 ; pub type WGPUPipelineStatisticName = :: std :: os :: raw :: c_uint ; pub const WGPUNativeQueryType_PipelineStatistics : WGPUNativeQueryType = 196608 ; pub const WGPUNativeQueryType_Force32 : WGPUNativeQueryType = 2147483647 ; pub type WGPUNativeQueryType = :: std :: os :: raw :: c_uint ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUInstanceExtras { pub chain : WGPUChainedStruct , pub backends : WGPUInstanceBackendFlags , pub flags : WGPUInstanceFlags , pub dx12ShaderCompiler : WGPUDx12Compiler , pub gles3MinorVersion : WGPUGles3MinorVersion , pub dxilPath : * const :: std :: os :: raw :: c_char , pub dxcPath : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_WGPUInstanceExtras () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUInstanceExtras > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUInstanceExtras > () , 48usize , concat ! ("Size of: " , stringify ! (WGPUInstanceExtras))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUInstanceExtras > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUInstanceExtras))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUInstanceExtras) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . backends) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUInstanceExtras) , "::" , stringify ! (backends))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . flags) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (WGPUInstanceExtras) , "::" , stringify ! (flags))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . dx12ShaderCompiler) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUInstanceExtras) , "::" , stringify ! (dx12ShaderCompiler))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . gles3MinorVersion) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (WGPUInstanceExtras) , "::" , stringify ! (gles3MinorVersion))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . dxilPath) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUInstanceExtras) , "::" , stringify ! (dxilPath))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . dxcPath) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUInstanceExtras) , "::" , stringify ! (dxcPath))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUDeviceExtras { pub chain : WGPUChainedStruct , pub tracePath : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_WGPUDeviceExtras () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUDeviceExtras > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUDeviceExtras > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUDeviceExtras))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUDeviceExtras > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUDeviceExtras))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUDeviceExtras) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . tracePath) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUDeviceExtras) , "::" , stringify ! (tracePath))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUNativeLimits { pub maxPushConstantSize : u32 , pub maxNonSamplerBindings : u32 , } # [test] fn bindgen_test_layout_WGPUNativeLimits () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUNativeLimits > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUNativeLimits > () , 8usize , concat ! ("Size of: " , stringify ! (WGPUNativeLimits))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUNativeLimits > () , 4usize , concat ! ("Alignment of " , stringify ! (WGPUNativeLimits))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxPushConstantSize) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUNativeLimits) , "::" , stringify ! (maxPushConstantSize))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . maxNonSamplerBindings) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (WGPUNativeLimits) , "::" , stringify ! (maxNonSamplerBindings))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPURequiredLimitsExtras { pub chain : WGPUChainedStruct , pub limits : WGPUNativeLimits , } # [test] fn bindgen_test_layout_WGPURequiredLimitsExtras () { const UNINIT : :: std :: mem :: MaybeUninit < WGPURequiredLimitsExtras > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPURequiredLimitsExtras > () , 24usize , concat ! ("Size of: " , stringify ! (WGPURequiredLimitsExtras))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPURequiredLimitsExtras > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPURequiredLimitsExtras))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPURequiredLimitsExtras) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . limits) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPURequiredLimitsExtras) , "::" , stringify ! (limits))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUSupportedLimitsExtras { pub chain : WGPUChainedStructOut , pub limits : WGPUNativeLimits , } # [test] fn bindgen_test_layout_WGPUSupportedLimitsExtras () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUSupportedLimitsExtras > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUSupportedLimitsExtras > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUSupportedLimitsExtras))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUSupportedLimitsExtras > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUSupportedLimitsExtras))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUSupportedLimitsExtras) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . limits) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUSupportedLimitsExtras) , "::" , stringify ! (limits))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUPushConstantRange { pub stages : WGPUShaderStageFlags , pub start : u32 , pub end : u32 , } # [test] fn bindgen_test_layout_WGPUPushConstantRange () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUPushConstantRange > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUPushConstantRange > () , 12usize , concat ! ("Size of: " , stringify ! (WGPUPushConstantRange))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUPushConstantRange > () , 4usize , concat ! ("Alignment of " , stringify ! (WGPUPushConstantRange))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . stages) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUPushConstantRange) , "::" , stringify ! (stages))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . start) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (WGPUPushConstantRange) , "::" , stringify ! (start))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . end) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUPushConstantRange) , "::" , stringify ! (end))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUPipelineLayoutExtras { pub chain : WGPUChainedStruct , pub pushConstantRangeCount : usize , pub pushConstantRanges : * const WGPUPushConstantRange , } # [test] fn bindgen_test_layout_WGPUPipelineLayoutExtras () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUPipelineLayoutExtras > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUPipelineLayoutExtras > () , 32usize , concat ! ("Size of: " , stringify ! (WGPUPipelineLayoutExtras))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUPipelineLayoutExtras > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUPipelineLayoutExtras))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUPipelineLayoutExtras) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . pushConstantRangeCount) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUPipelineLayoutExtras) , "::" , stringify ! (pushConstantRangeCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . pushConstantRanges) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUPipelineLayoutExtras) , "::" , stringify ! (pushConstantRanges))) ; } pub type WGPUSubmissionIndex = u64 ; # [repr (C)] pub struct WGPUWrappedSubmissionIndex { pub queue : WGPUQueue , pub submissionIndex : WGPUSubmissionIndex , } # [test] fn bindgen_test_layout_WGPUWrappedSubmissionIndex () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUWrappedSubmissionIndex > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUWrappedSubmissionIndex > () , 16usize , concat ! ("Size of: " , stringify ! (WGPUWrappedSubmissionIndex))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUWrappedSubmissionIndex > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUWrappedSubmissionIndex))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . queue) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUWrappedSubmissionIndex) , "::" , stringify ! (queue))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . submissionIndex) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUWrappedSubmissionIndex) , "::" , stringify ! (submissionIndex))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUShaderDefine { pub name : * const :: std :: os :: raw :: c_char , pub value : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_WGPUShaderDefine () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUShaderDefine > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUShaderDefine > () , 16usize , concat ! ("Size of: " , stringify ! (WGPUShaderDefine))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUShaderDefine > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUShaderDefine))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . name) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderDefine) , "::" , stringify ! (name))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . value) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderDefine) , "::" , stringify ! (value))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUShaderModuleGLSLDescriptor { pub chain : WGPUChainedStruct , pub stage : WGPUShaderStage , pub code : * const :: std :: os :: raw :: c_char , pub defineCount : u32 , pub defines : * mut WGPUShaderDefine , } # [test] fn bindgen_test_layout_WGPUShaderModuleGLSLDescriptor () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUShaderModuleGLSLDescriptor > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUShaderModuleGLSLDescriptor > () , 48usize , concat ! ("Size of: " , stringify ! (WGPUShaderModuleGLSLDescriptor))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUShaderModuleGLSLDescriptor > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUShaderModuleGLSLDescriptor))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleGLSLDescriptor) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . stage) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleGLSLDescriptor) , "::" , stringify ! (stage))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . code) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleGLSLDescriptor) , "::" , stringify ! (code))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . defineCount) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleGLSLDescriptor) , "::" , stringify ! (defineCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . defines) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUShaderModuleGLSLDescriptor) , "::" , stringify ! (defines))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPURegistryReport { pub numAllocated : usize , pub numKeptFromUser : usize , pub numReleasedFromUser : usize , pub numError : usize , pub elementSize : usize , } # [test] fn bindgen_test_layout_WGPURegistryReport () { const UNINIT : :: std :: mem :: MaybeUninit < WGPURegistryReport > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPURegistryReport > () , 40usize , concat ! ("Size of: " , stringify ! (WGPURegistryReport))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPURegistryReport > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPURegistryReport))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . numAllocated) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPURegistryReport) , "::" , stringify ! (numAllocated))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . numKeptFromUser) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPURegistryReport) , "::" , stringify ! (numKeptFromUser))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . numReleasedFromUser) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPURegistryReport) , "::" , stringify ! (numReleasedFromUser))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . numError) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPURegistryReport) , "::" , stringify ! (numError))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . elementSize) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPURegistryReport) , "::" , stringify ! (elementSize))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUHubReport { pub adapters : WGPURegistryReport , pub devices : WGPURegistryReport , pub queues : WGPURegistryReport , pub pipelineLayouts : WGPURegistryReport , pub shaderModules : WGPURegistryReport , pub bindGroupLayouts : WGPURegistryReport , pub bindGroups : WGPURegistryReport , pub commandBuffers : WGPURegistryReport , pub renderBundles : WGPURegistryReport , pub renderPipelines : WGPURegistryReport , pub computePipelines : WGPURegistryReport , pub querySets : WGPURegistryReport , pub buffers : WGPURegistryReport , pub textures : WGPURegistryReport , pub textureViews : WGPURegistryReport , pub samplers : WGPURegistryReport , } # [test] fn bindgen_test_layout_WGPUHubReport () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUHubReport > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUHubReport > () , 640usize , concat ! ("Size of: " , stringify ! (WGPUHubReport))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUHubReport > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUHubReport))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . adapters) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUHubReport) , "::" , stringify ! (adapters))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . devices) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUHubReport) , "::" , stringify ! (devices))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . queues) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (WGPUHubReport) , "::" , stringify ! (queues))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . pipelineLayouts) as usize - ptr as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (WGPUHubReport) , "::" , stringify ! (pipelineLayouts))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . shaderModules) as usize - ptr as usize } , 160usize , concat ! ("Offset of field: " , stringify ! (WGPUHubReport) , "::" , stringify ! (shaderModules))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bindGroupLayouts) as usize - ptr as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (WGPUHubReport) , "::" , stringify ! (bindGroupLayouts))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bindGroups) as usize - ptr as usize } , 240usize , concat ! ("Offset of field: " , stringify ! (WGPUHubReport) , "::" , stringify ! (bindGroups))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . commandBuffers) as usize - ptr as usize } , 280usize , concat ! ("Offset of field: " , stringify ! (WGPUHubReport) , "::" , stringify ! (commandBuffers))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . renderBundles) as usize - ptr as usize } , 320usize , concat ! ("Offset of field: " , stringify ! (WGPUHubReport) , "::" , stringify ! (renderBundles))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . renderPipelines) as usize - ptr as usize } , 360usize , concat ! ("Offset of field: " , stringify ! (WGPUHubReport) , "::" , stringify ! (renderPipelines))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . computePipelines) as usize - ptr as usize } , 400usize , concat ! ("Offset of field: " , stringify ! (WGPUHubReport) , "::" , stringify ! (computePipelines))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . querySets) as usize - ptr as usize } , 440usize , concat ! ("Offset of field: " , stringify ! (WGPUHubReport) , "::" , stringify ! (querySets))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . buffers) as usize - ptr as usize } , 480usize , concat ! ("Offset of field: " , stringify ! (WGPUHubReport) , "::" , stringify ! (buffers))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . textures) as usize - ptr as usize } , 520usize , concat ! ("Offset of field: " , stringify ! (WGPUHubReport) , "::" , stringify ! (textures))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . textureViews) as usize - ptr as usize } , 560usize , concat ! ("Offset of field: " , stringify ! (WGPUHubReport) , "::" , stringify ! (textureViews))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . samplers) as usize - ptr as usize } , 600usize , concat ! ("Offset of field: " , stringify ! (WGPUHubReport) , "::" , stringify ! (samplers))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUGlobalReport { pub surfaces : WGPURegistryReport , pub backendType : WGPUBackendType , pub vulkan : WGPUHubReport , pub metal : WGPUHubReport , pub dx12 : WGPUHubReport , pub gl : WGPUHubReport , } # [test] fn bindgen_test_layout_WGPUGlobalReport () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUGlobalReport > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUGlobalReport > () , 2608usize , concat ! ("Size of: " , stringify ! (WGPUGlobalReport))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUGlobalReport > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUGlobalReport))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . surfaces) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUGlobalReport) , "::" , stringify ! (surfaces))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . backendType) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUGlobalReport) , "::" , stringify ! (backendType))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . vulkan) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (WGPUGlobalReport) , "::" , stringify ! (vulkan))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . metal) as usize - ptr as usize } , 688usize , concat ! ("Offset of field: " , stringify ! (WGPUGlobalReport) , "::" , stringify ! (metal))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . dx12) as usize - ptr as usize } , 1328usize , concat ! ("Offset of field: " , stringify ! (WGPUGlobalReport) , "::" , stringify ! (dx12))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . gl) as usize - ptr as usize } , 1968usize , concat ! ("Offset of field: " , stringify ! (WGPUGlobalReport) , "::" , stringify ! (gl))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUInstanceEnumerateAdapterOptions { pub nextInChain : * const WGPUChainedStruct , pub backends : WGPUInstanceBackendFlags , } # [test] fn bindgen_test_layout_WGPUInstanceEnumerateAdapterOptions () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUInstanceEnumerateAdapterOptions > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUInstanceEnumerateAdapterOptions > () , 16usize , concat ! ("Size of: " , stringify ! (WGPUInstanceEnumerateAdapterOptions))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUInstanceEnumerateAdapterOptions > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUInstanceEnumerateAdapterOptions))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . nextInChain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUInstanceEnumerateAdapterOptions) , "::" , stringify ! (nextInChain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . backends) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (WGPUInstanceEnumerateAdapterOptions) , "::" , stringify ! (backends))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUBindGroupEntryExtras { pub chain : WGPUChainedStruct , pub buffers : * const WGPUBuffer , pub bufferCount : usize , pub samplers : * const WGPUSampler , pub samplerCount : usize , pub textureViews : * const WGPUTextureView , pub textureViewCount : usize , } # [test] fn bindgen_test_layout_WGPUBindGroupEntryExtras () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUBindGroupEntryExtras > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUBindGroupEntryExtras > () , 64usize , concat ! ("Size of: " , stringify ! (WGPUBindGroupEntryExtras))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUBindGroupEntryExtras > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUBindGroupEntryExtras))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupEntryExtras) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . buffers) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupEntryExtras) , "::" , stringify ! (buffers))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . bufferCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupEntryExtras) , "::" , stringify ! (bufferCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . samplers) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupEntryExtras) , "::" , stringify ! (samplers))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . samplerCount) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupEntryExtras) , "::" , stringify ! (samplerCount))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . textureViews) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupEntryExtras) , "::" , stringify ! (textureViews))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . textureViewCount) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupEntryExtras) , "::" , stringify ! (textureViewCount))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUBindGroupLayoutEntryExtras { pub chain : WGPUChainedStruct , pub count : u32 , } # [test] fn bindgen_test_layout_WGPUBindGroupLayoutEntryExtras () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUBindGroupLayoutEntryExtras > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUBindGroupLayoutEntryExtras > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUBindGroupLayoutEntryExtras))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUBindGroupLayoutEntryExtras > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUBindGroupLayoutEntryExtras))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupLayoutEntryExtras) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . count) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUBindGroupLayoutEntryExtras) , "::" , stringify ! (count))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUQuerySetDescriptorExtras { pub chain : WGPUChainedStruct , pub pipelineStatistics : * const WGPUPipelineStatisticName , pub pipelineStatisticCount : usize , } # [test] fn bindgen_test_layout_WGPUQuerySetDescriptorExtras () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUQuerySetDescriptorExtras > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUQuerySetDescriptorExtras > () , 32usize , concat ! ("Size of: " , stringify ! (WGPUQuerySetDescriptorExtras))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUQuerySetDescriptorExtras > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUQuerySetDescriptorExtras))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUQuerySetDescriptorExtras) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . pipelineStatistics) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUQuerySetDescriptorExtras) , "::" , stringify ! (pipelineStatistics))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . pipelineStatisticCount) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (WGPUQuerySetDescriptorExtras) , "::" , stringify ! (pipelineStatisticCount))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct WGPUSurfaceConfigurationExtras { pub chain : WGPUChainedStruct , pub desiredMaximumFrameLatency : WGPUBool , } # [test] fn bindgen_test_layout_WGPUSurfaceConfigurationExtras () { const UNINIT : :: std :: mem :: MaybeUninit < WGPUSurfaceConfigurationExtras > = :: std :: mem :: MaybeUninit :: uninit () ; let ptr = UNINIT . as_ptr () ; assert_eq ! (:: std :: mem :: size_of :: < WGPUSurfaceConfigurationExtras > () , 24usize , concat ! ("Size of: " , stringify ! (WGPUSurfaceConfigurationExtras))) ; assert_eq ! (:: std :: mem :: align_of :: < WGPUSurfaceConfigurationExtras > () , 8usize , concat ! ("Alignment of " , stringify ! (WGPUSurfaceConfigurationExtras))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . chain) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceConfigurationExtras) , "::" , stringify ! (chain))) ; assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . desiredMaximumFrameLatency) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (WGPUSurfaceConfigurationExtras) , "::" , stringify ! (desiredMaximumFrameLatency))) ; } pub type WGPULogCallback = :: std :: option :: Option < unsafe extern "C" fn (level : WGPULogLevel , message : * const :: std :: os :: raw :: c_char , userdata : * mut :: std :: os :: raw :: c_void) > ;