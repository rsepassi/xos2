diff --git a/Cargo.toml b/Cargo.toml
index 3d71b91..1a855d0 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -39,7 +39,7 @@ rev = "87576b72b37c6b78b41104eb25fc31893af94092"
 version = "0.19"
 
 [lib]
-crate-type = ["cdylib", "staticlib"]
+crate-type = ["staticlib"]
 
 [features]
 default = ["wgsl", "spirv", "glsl", "dx12", "metal"]
@@ -136,5 +136,4 @@ parking_lot = "0.12"
 smallvec = "1"
 
 [build-dependencies]
-bindgen = "0.69"
 cfg_aliases = "0.1"
diff --git a/build.rs b/build.rs
index 49d80d6..4b3f241 100644
--- a/build.rs
+++ b/build.rs
@@ -1,6 +1,6 @@
 use std::env;
+use std::fs;
 use std::path::PathBuf;
-use std::process::Command;
 
 fn main() {
     cfg_aliases::cfg_aliases! {
@@ -15,68 +15,8 @@ fn main() {
 
     println!("cargo:rerun-if-changed=ffi/webgpu-headers/webgpu.h");
     println!("cargo:rerun-if-changed=ffi/wgpu.h");
+    println!("cargo:rerun-if-changed=ffi/bindings.rs");
 
-    #[rustfmt::skip]
-    let types_to_rename = vec![
-        ("WGPUAdapter", "WGPUAdapterImpl"),
-        ("WGPUBindGroup", "WGPUBindGroupImpl"),
-        ("WGPUBindGroupLayout", "WGPUBindGroupLayoutImpl"),
-        ("WGPUBuffer", "WGPUBufferImpl"),
-        ("WGPUCommandBuffer", "WGPUCommandBufferImpl"),
-        ("WGPUCommandEncoder", "WGPUCommandEncoderImpl"),
-        ("WGPUComputePassEncoder", "WGPUComputePassEncoderImpl"),
-        ("WGPUComputePipeline", "WGPUComputePipelineImpl"),
-        ("WGPUDevice", "WGPUDeviceImpl"),
-        ("WGPUInstance", "WGPUInstanceImpl"),
-        ("WGPUPipelineLayout", "WGPUPipelineLayoutImpl"),
-        ("WGPUQuerySet", "WGPUQuerySetImpl"),
-        ("WGPUQueue", "WGPUQueueImpl"),
-        ("WGPURenderBundle", "WGPURenderBundleImpl"),
-        ("WGPURenderBundleEncoder", "WGPURenderBundleEncoderImpl"),
-        ("WGPURenderPassEncoder", "WGPURenderPassEncoderImpl"),
-        ("WGPURenderPipeline", "WGPURenderPipelineImpl"),
-        ("WGPUSampler", "WGPUSamplerImpl"),
-        ("WGPUShaderModule", "WGPUShaderModuleImpl"),
-        ("WGPUSurface", "WGPUSurfaceImpl"),
-        ("WGPUTexture", "WGPUTextureImpl"),
-        ("WGPUTextureView", "WGPUTextureViewImpl"),
-    ];
-    let mut builder = bindgen::Builder::default()
-        .header("ffi/wgpu.h")
-        .clang_arg("-Iffi/webgpu-headers")
-        .parse_callbacks(Box::new(bindgen::CargoCallbacks::new()))
-        .allowlist_item("WGPU.*")
-        .allowlist_item("wgpu.*")
-        .blocklist_function("wgpuGetProcAddress")
-        .prepend_enum_name(false)
-        .size_t_is_usize(true)
-        .ignore_functions()
-        .layout_tests(true);
-
-    for (old_name, new_name) in types_to_rename {
-        let line = format!("pub type {old_name} = *const crate::{new_name};");
-        builder = builder
-            .blocklist_type(old_name)
-            .blocklist_type(format!("{old_name}Impl"))
-            .raw_line(line);
-    }
-
-    // See https://github.com/rust-lang/rust-bindgen/issues/1780
-    if let Ok("ios") = env::var("CARGO_CFG_TARGET_OS").as_ref().map(|x| &**x) {
-        let output = Command::new("xcrun")
-            .args(["--sdk", "iphoneos", "--show-sdk-path"])
-            .output()
-            .expect("xcrun failed")
-            .stdout;
-        let sdk = std::str::from_utf8(&output).expect("invalid output from `xcrun`");
-        builder = builder
-            .clang_arg(format!("-isysroot {sdk}"))
-            .clang_arg("--target=arm64-apple-ios");
-    }
-
-    let bindings = builder.generate().expect("Unable to generate bindings");
-    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
-    bindings
-        .write_to_file(out_path.join("bindings.rs"))
-        .expect("Couldn't write bindings!");
+    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap()).join("bindings.rs");
+    fs::copy("ffi/bindings.rs", &out_path).expect("failed to copy");
 }
